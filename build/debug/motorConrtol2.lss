
build/debug/motorConrtol2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031f4  080031f4  000041f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003234  08003234  00005028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003234  08003234  00005028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003234  08003234  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003234  08003234  00004234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003238  08003238  00004238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800323c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000028  08003264  00005028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003264  00005130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 12 .comment      00000045  00000000  00000000  00005051  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011134  00000000  00000000  00005096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c79  00000000  00000000  000161ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000086b9  00000000  00000000  00018e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e48  00000000  00000000  00021500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ae2  00000000  00000000  00022348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df24  00000000  00000000  00022e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000041d5  00000000  00000000  00030d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000272c  00000000  00000000  00034f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000010b  00000000  00000000  00037650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__aeabi_drsub>:
 800010c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000110:	e002      	b.n	8000118 <__adddf3>
 8000112:	bf00      	nop

08000114 <__aeabi_dsub>:
 8000114:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000118 <__adddf3>:
 8000118:	b530      	push	{r4, r5, lr}
 800011a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800011e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000122:	ea94 0f05 	teq	r4, r5
 8000126:	bf08      	it	eq
 8000128:	ea90 0f02 	teqeq	r0, r2
 800012c:	bf1f      	itttt	ne
 800012e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000132:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000136:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800013a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800013e:	f000 80e2 	beq.w	8000306 <__adddf3+0x1ee>
 8000142:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000146:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800014a:	bfb8      	it	lt
 800014c:	426d      	neglt	r5, r5
 800014e:	dd0c      	ble.n	800016a <__adddf3+0x52>
 8000150:	442c      	add	r4, r5
 8000152:	ea80 0202 	eor.w	r2, r0, r2
 8000156:	ea81 0303 	eor.w	r3, r1, r3
 800015a:	ea82 0000 	eor.w	r0, r2, r0
 800015e:	ea83 0101 	eor.w	r1, r3, r1
 8000162:	ea80 0202 	eor.w	r2, r0, r2
 8000166:	ea81 0303 	eor.w	r3, r1, r3
 800016a:	2d36      	cmp	r5, #54	@ 0x36
 800016c:	bf88      	it	hi
 800016e:	bd30      	pophi	{r4, r5, pc}
 8000170:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000174:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000178:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800017c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000180:	d002      	beq.n	8000188 <__adddf3+0x70>
 8000182:	4240      	negs	r0, r0
 8000184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000188:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800018c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000190:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000194:	d002      	beq.n	800019c <__adddf3+0x84>
 8000196:	4252      	negs	r2, r2
 8000198:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800019c:	ea94 0f05 	teq	r4, r5
 80001a0:	f000 80a7 	beq.w	80002f2 <__adddf3+0x1da>
 80001a4:	f1a4 0401 	sub.w	r4, r4, #1
 80001a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ac:	db0d      	blt.n	80001ca <__adddf3+0xb2>
 80001ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001b2:	fa22 f205 	lsr.w	r2, r2, r5
 80001b6:	1880      	adds	r0, r0, r2
 80001b8:	f141 0100 	adc.w	r1, r1, #0
 80001bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80001c0:	1880      	adds	r0, r0, r2
 80001c2:	fa43 f305 	asr.w	r3, r3, r5
 80001c6:	4159      	adcs	r1, r3
 80001c8:	e00e      	b.n	80001e8 <__adddf3+0xd0>
 80001ca:	f1a5 0520 	sub.w	r5, r5, #32
 80001ce:	f10e 0e20 	add.w	lr, lr, #32
 80001d2:	2a01      	cmp	r2, #1
 80001d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001d8:	bf28      	it	cs
 80001da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001de:	fa43 f305 	asr.w	r3, r3, r5
 80001e2:	18c0      	adds	r0, r0, r3
 80001e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80001e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80001ec:	d507      	bpl.n	80001fe <__adddf3+0xe6>
 80001ee:	f04f 0e00 	mov.w	lr, #0
 80001f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80001f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80001fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80001fe:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000202:	d31b      	bcc.n	800023c <__adddf3+0x124>
 8000204:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000208:	d30c      	bcc.n	8000224 <__adddf3+0x10c>
 800020a:	0849      	lsrs	r1, r1, #1
 800020c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000210:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000214:	f104 0401 	add.w	r4, r4, #1
 8000218:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800021c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000220:	f080 809a 	bcs.w	8000358 <__adddf3+0x240>
 8000224:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000228:	bf08      	it	eq
 800022a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800022e:	f150 0000 	adcs.w	r0, r0, #0
 8000232:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000236:	ea41 0105 	orr.w	r1, r1, r5
 800023a:	bd30      	pop	{r4, r5, pc}
 800023c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000240:	4140      	adcs	r0, r0
 8000242:	eb41 0101 	adc.w	r1, r1, r1
 8000246:	3c01      	subs	r4, #1
 8000248:	bf28      	it	cs
 800024a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800024e:	d2e9      	bcs.n	8000224 <__adddf3+0x10c>
 8000250:	f091 0f00 	teq	r1, #0
 8000254:	bf04      	itt	eq
 8000256:	4601      	moveq	r1, r0
 8000258:	2000      	moveq	r0, #0
 800025a:	fab1 f381 	clz	r3, r1
 800025e:	bf08      	it	eq
 8000260:	3320      	addeq	r3, #32
 8000262:	f1a3 030b 	sub.w	r3, r3, #11
 8000266:	f1b3 0220 	subs.w	r2, r3, #32
 800026a:	da0c      	bge.n	8000286 <__adddf3+0x16e>
 800026c:	320c      	adds	r2, #12
 800026e:	dd08      	ble.n	8000282 <__adddf3+0x16a>
 8000270:	f102 0c14 	add.w	ip, r2, #20
 8000274:	f1c2 020c 	rsb	r2, r2, #12
 8000278:	fa01 f00c 	lsl.w	r0, r1, ip
 800027c:	fa21 f102 	lsr.w	r1, r1, r2
 8000280:	e00c      	b.n	800029c <__adddf3+0x184>
 8000282:	f102 0214 	add.w	r2, r2, #20
 8000286:	bfd8      	it	le
 8000288:	f1c2 0c20 	rsble	ip, r2, #32
 800028c:	fa01 f102 	lsl.w	r1, r1, r2
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	bfdc      	itt	le
 8000296:	ea41 010c 	orrle.w	r1, r1, ip
 800029a:	4090      	lslle	r0, r2
 800029c:	1ae4      	subs	r4, r4, r3
 800029e:	bfa2      	ittt	ge
 80002a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002a4:	4329      	orrge	r1, r5
 80002a6:	bd30      	popge	{r4, r5, pc}
 80002a8:	ea6f 0404 	mvn.w	r4, r4
 80002ac:	3c1f      	subs	r4, #31
 80002ae:	da1c      	bge.n	80002ea <__adddf3+0x1d2>
 80002b0:	340c      	adds	r4, #12
 80002b2:	dc0e      	bgt.n	80002d2 <__adddf3+0x1ba>
 80002b4:	f104 0414 	add.w	r4, r4, #20
 80002b8:	f1c4 0220 	rsb	r2, r4, #32
 80002bc:	fa20 f004 	lsr.w	r0, r0, r4
 80002c0:	fa01 f302 	lsl.w	r3, r1, r2
 80002c4:	ea40 0003 	orr.w	r0, r0, r3
 80002c8:	fa21 f304 	lsr.w	r3, r1, r4
 80002cc:	ea45 0103 	orr.w	r1, r5, r3
 80002d0:	bd30      	pop	{r4, r5, pc}
 80002d2:	f1c4 040c 	rsb	r4, r4, #12
 80002d6:	f1c4 0220 	rsb	r2, r4, #32
 80002da:	fa20 f002 	lsr.w	r0, r0, r2
 80002de:	fa01 f304 	lsl.w	r3, r1, r4
 80002e2:	ea40 0003 	orr.w	r0, r0, r3
 80002e6:	4629      	mov	r1, r5
 80002e8:	bd30      	pop	{r4, r5, pc}
 80002ea:	fa21 f004 	lsr.w	r0, r1, r4
 80002ee:	4629      	mov	r1, r5
 80002f0:	bd30      	pop	{r4, r5, pc}
 80002f2:	f094 0f00 	teq	r4, #0
 80002f6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80002fa:	bf06      	itte	eq
 80002fc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000300:	3401      	addeq	r4, #1
 8000302:	3d01      	subne	r5, #1
 8000304:	e74e      	b.n	80001a4 <__adddf3+0x8c>
 8000306:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800030a:	bf18      	it	ne
 800030c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000310:	d029      	beq.n	8000366 <__adddf3+0x24e>
 8000312:	ea94 0f05 	teq	r4, r5
 8000316:	bf08      	it	eq
 8000318:	ea90 0f02 	teqeq	r0, r2
 800031c:	d005      	beq.n	800032a <__adddf3+0x212>
 800031e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000322:	bf04      	itt	eq
 8000324:	4619      	moveq	r1, r3
 8000326:	4610      	moveq	r0, r2
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	ea91 0f03 	teq	r1, r3
 800032e:	bf1e      	ittt	ne
 8000330:	2100      	movne	r1, #0
 8000332:	2000      	movne	r0, #0
 8000334:	bd30      	popne	{r4, r5, pc}
 8000336:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800033a:	d105      	bne.n	8000348 <__adddf3+0x230>
 800033c:	0040      	lsls	r0, r0, #1
 800033e:	4149      	adcs	r1, r1
 8000340:	bf28      	it	cs
 8000342:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800034c:	bf3c      	itt	cc
 800034e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000352:	bd30      	popcc	{r4, r5, pc}
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000358:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800035c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036a:	bf1a      	itte	ne
 800036c:	4619      	movne	r1, r3
 800036e:	4610      	movne	r0, r2
 8000370:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000374:	bf1c      	itt	ne
 8000376:	460b      	movne	r3, r1
 8000378:	4602      	movne	r2, r0
 800037a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800037e:	bf06      	itte	eq
 8000380:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000384:	ea91 0f03 	teqeq	r1, r3
 8000388:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	bf00      	nop

08000390 <__aeabi_ui2d>:
 8000390:	f090 0f00 	teq	r0, #0
 8000394:	bf04      	itt	eq
 8000396:	2100      	moveq	r1, #0
 8000398:	4770      	bxeq	lr
 800039a:	b530      	push	{r4, r5, lr}
 800039c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003a4:	f04f 0500 	mov.w	r5, #0
 80003a8:	f04f 0100 	mov.w	r1, #0
 80003ac:	e750      	b.n	8000250 <__adddf3+0x138>
 80003ae:	bf00      	nop

080003b0 <__aeabi_i2d>:
 80003b0:	f090 0f00 	teq	r0, #0
 80003b4:	bf04      	itt	eq
 80003b6:	2100      	moveq	r1, #0
 80003b8:	4770      	bxeq	lr
 80003ba:	b530      	push	{r4, r5, lr}
 80003bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003c0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003c4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80003c8:	bf48      	it	mi
 80003ca:	4240      	negmi	r0, r0
 80003cc:	f04f 0100 	mov.w	r1, #0
 80003d0:	e73e      	b.n	8000250 <__adddf3+0x138>
 80003d2:	bf00      	nop

080003d4 <__aeabi_f2d>:
 80003d4:	0042      	lsls	r2, r0, #1
 80003d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003da:	ea4f 0131 	mov.w	r1, r1, rrx
 80003de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003e2:	bf1f      	itttt	ne
 80003e4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80003e8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80003ec:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80003f0:	4770      	bxne	lr
 80003f2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80003f6:	bf08      	it	eq
 80003f8:	4770      	bxeq	lr
 80003fa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80003fe:	bf04      	itt	eq
 8000400:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	e71c      	b.n	8000250 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_ul2d>:
 8000418:	ea50 0201 	orrs.w	r2, r0, r1
 800041c:	bf08      	it	eq
 800041e:	4770      	bxeq	lr
 8000420:	b530      	push	{r4, r5, lr}
 8000422:	f04f 0500 	mov.w	r5, #0
 8000426:	e00a      	b.n	800043e <__aeabi_l2d+0x16>

08000428 <__aeabi_l2d>:
 8000428:	ea50 0201 	orrs.w	r2, r0, r1
 800042c:	bf08      	it	eq
 800042e:	4770      	bxeq	lr
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000436:	d502      	bpl.n	800043e <__aeabi_l2d+0x16>
 8000438:	4240      	negs	r0, r0
 800043a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000442:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000446:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800044a:	f43f aed8 	beq.w	80001fe <__adddf3+0xe6>
 800044e:	f04f 0203 	mov.w	r2, #3
 8000452:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000456:	bf18      	it	ne
 8000458:	3203      	addne	r2, #3
 800045a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800045e:	bf18      	it	ne
 8000460:	3203      	addne	r2, #3
 8000462:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa00 fc03 	lsl.w	ip, r0, r3
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 fe03 	lsl.w	lr, r1, r3
 8000476:	ea40 000e 	orr.w	r0, r0, lr
 800047a:	fa21 f102 	lsr.w	r1, r1, r2
 800047e:	4414      	add	r4, r2
 8000480:	e6bd      	b.n	80001fe <__adddf3+0xe6>
 8000482:	bf00      	nop

08000484 <__gedf2>:
 8000484:	f04f 3cff 	mov.w	ip, #4294967295
 8000488:	e006      	b.n	8000498 <__cmpdf2+0x4>
 800048a:	bf00      	nop

0800048c <__ledf2>:
 800048c:	f04f 0c01 	mov.w	ip, #1
 8000490:	e002      	b.n	8000498 <__cmpdf2+0x4>
 8000492:	bf00      	nop

08000494 <__cmpdf2>:
 8000494:	f04f 0c01 	mov.w	ip, #1
 8000498:	f84d cd04 	str.w	ip, [sp, #-4]!
 800049c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004a8:	bf18      	it	ne
 80004aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ae:	d01b      	beq.n	80004e8 <__cmpdf2+0x54>
 80004b0:	b001      	add	sp, #4
 80004b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004b6:	bf0c      	ite	eq
 80004b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004bc:	ea91 0f03 	teqne	r1, r3
 80004c0:	bf02      	ittt	eq
 80004c2:	ea90 0f02 	teqeq	r0, r2
 80004c6:	2000      	moveq	r0, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	f110 0f00 	cmn.w	r0, #0
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf58      	it	pl
 80004d4:	4299      	cmppl	r1, r3
 80004d6:	bf08      	it	eq
 80004d8:	4290      	cmpeq	r0, r2
 80004da:	bf2c      	ite	cs
 80004dc:	17d8      	asrcs	r0, r3, #31
 80004de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80004e2:	f040 0001 	orr.w	r0, r0, #1
 80004e6:	4770      	bx	lr
 80004e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f0:	d102      	bne.n	80004f8 <__cmpdf2+0x64>
 80004f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80004f6:	d107      	bne.n	8000508 <__cmpdf2+0x74>
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000500:	d1d6      	bne.n	80004b0 <__cmpdf2+0x1c>
 8000502:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000506:	d0d3      	beq.n	80004b0 <__cmpdf2+0x1c>
 8000508:	f85d 0b04 	ldr.w	r0, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <__aeabi_cdrcmple>:
 8000510:	4684      	mov	ip, r0
 8000512:	4610      	mov	r0, r2
 8000514:	4662      	mov	r2, ip
 8000516:	468c      	mov	ip, r1
 8000518:	4619      	mov	r1, r3
 800051a:	4663      	mov	r3, ip
 800051c:	e000      	b.n	8000520 <__aeabi_cdcmpeq>
 800051e:	bf00      	nop

08000520 <__aeabi_cdcmpeq>:
 8000520:	b501      	push	{r0, lr}
 8000522:	f7ff ffb7 	bl	8000494 <__cmpdf2>
 8000526:	2800      	cmp	r0, #0
 8000528:	bf48      	it	mi
 800052a:	f110 0f00 	cmnmi.w	r0, #0
 800052e:	bd01      	pop	{r0, pc}

08000530 <__aeabi_dcmpeq>:
 8000530:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000534:	f7ff fff4 	bl	8000520 <__aeabi_cdcmpeq>
 8000538:	bf0c      	ite	eq
 800053a:	2001      	moveq	r0, #1
 800053c:	2000      	movne	r0, #0
 800053e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000542:	bf00      	nop

08000544 <__aeabi_dcmplt>:
 8000544:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000548:	f7ff ffea 	bl	8000520 <__aeabi_cdcmpeq>
 800054c:	bf34      	ite	cc
 800054e:	2001      	movcc	r0, #1
 8000550:	2000      	movcs	r0, #0
 8000552:	f85d fb08 	ldr.w	pc, [sp], #8
 8000556:	bf00      	nop

08000558 <__aeabi_dcmple>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff ffe0 	bl	8000520 <__aeabi_cdcmpeq>
 8000560:	bf94      	ite	ls
 8000562:	2001      	movls	r0, #1
 8000564:	2000      	movhi	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_dcmpge>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffce 	bl	8000510 <__aeabi_cdrcmple>
 8000574:	bf94      	ite	ls
 8000576:	2001      	movls	r0, #1
 8000578:	2000      	movhi	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_dcmpgt>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffc4 	bl	8000510 <__aeabi_cdrcmple>
 8000588:	bf34      	ite	cc
 800058a:	2001      	movcc	r0, #1
 800058c:	2000      	movcs	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <deregister_tm_clones>:
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <deregister_tm_clones+0x10>)
 8000596:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <deregister_tm_clones+0x14>)
 8000598:	4283      	cmp	r3, r0
 800059a:	d002      	beq.n	80005a2 <deregister_tm_clones+0xe>
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <deregister_tm_clones+0x18>)
 800059e:	b103      	cbz	r3, 80005a2 <deregister_tm_clones+0xe>
 80005a0:	4718      	bx	r3
 80005a2:	4770      	bx	lr
 80005a4:	20000028 	.word	0x20000028
 80005a8:	20000028 	.word	0x20000028
 80005ac:	00000000 	.word	0x00000000

080005b0 <register_tm_clones>:
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <register_tm_clones+0x18>)
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <register_tm_clones+0x1c>)
 80005b4:	1a1b      	subs	r3, r3, r0
 80005b6:	0fd9      	lsrs	r1, r3, #31
 80005b8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80005bc:	1049      	asrs	r1, r1, #1
 80005be:	d002      	beq.n	80005c6 <register_tm_clones+0x16>
 80005c0:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <register_tm_clones+0x20>)
 80005c2:	b103      	cbz	r3, 80005c6 <register_tm_clones+0x16>
 80005c4:	4718      	bx	r3
 80005c6:	4770      	bx	lr
 80005c8:	20000028 	.word	0x20000028
 80005cc:	20000028 	.word	0x20000028
 80005d0:	00000000 	.word	0x00000000

080005d4 <__do_global_dtors_aux>:
 80005d4:	b510      	push	{r4, lr}
 80005d6:	4c06      	ldr	r4, [pc, #24]	@ (80005f0 <__do_global_dtors_aux+0x1c>)
 80005d8:	7823      	ldrb	r3, [r4, #0]
 80005da:	b943      	cbnz	r3, 80005ee <__do_global_dtors_aux+0x1a>
 80005dc:	f7ff ffda 	bl	8000594 <deregister_tm_clones>
 80005e0:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <__do_global_dtors_aux+0x20>)
 80005e2:	b113      	cbz	r3, 80005ea <__do_global_dtors_aux+0x16>
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <__do_global_dtors_aux+0x24>)
 80005e6:	f3af 8000 	nop.w
 80005ea:	2301      	movs	r3, #1
 80005ec:	7023      	strb	r3, [r4, #0]
 80005ee:	bd10      	pop	{r4, pc}
 80005f0:	20000028 	.word	0x20000028
 80005f4:	00000000 	.word	0x00000000
 80005f8:	080031dc 	.word	0x080031dc

080005fc <frame_dummy>:
 80005fc:	b508      	push	{r3, lr}
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <frame_dummy+0x18>)
 8000600:	b11b      	cbz	r3, 800060a <frame_dummy+0xe>
 8000602:	4905      	ldr	r1, [pc, #20]	@ (8000618 <frame_dummy+0x1c>)
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <frame_dummy+0x20>)
 8000606:	f3af 8000 	nop.w
 800060a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800060e:	f7ff bfcf 	b.w	80005b0 <register_tm_clones>
 8000612:	bf00      	nop
 8000614:	00000000 	.word	0x00000000
 8000618:	2000002c 	.word	0x2000002c
 800061c:	080031dc 	.word	0x080031dc

08000620 <init>:
#include "buttons.h"

void init(Button *btt){
    btt->btn_flag = true;
 8000620:	2301      	movs	r3, #1
 8000622:	7403      	strb	r3, [r0, #16]
}
 8000624:	4770      	bx	lr

08000626 <tick>:

bool tick(Button *btt){
 8000626:	b570      	push	{r4, r5, r6, lr}
 8000628:	4604      	mov	r4, r0
    bool btn_state = HAL_GPIO_ReadPin(btt->port, btt->pin);
 800062a:	8881      	ldrh	r1, [r0, #4]
 800062c:	6800      	ldr	r0, [r0, #0]
 800062e:	f001 fabf 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000632:	1e05      	subs	r5, r0, #0
 8000634:	bf14      	ite	ne
 8000636:	2601      	movne	r6, #1
 8000638:	2600      	moveq	r6, #0

    if (!btn_state && !btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 800063a:	d102      	bne.n	8000642 <tick+0x1c>
 800063c:	7c23      	ldrb	r3, [r4, #16]
 800063e:	b13b      	cbz	r3, 8000650 <tick+0x2a>
        btt->btn_flag = true;
        if(!btt->btn_hold){btt->btn_single = true;}
        btt->btn_hold = false;
        btt->btn_timer = HAL_GetTick();
    }
    if (btn_state && btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 8000640:	b10d      	cbz	r5, 8000646 <tick+0x20>
 8000642:	7c23      	ldrb	r3, [r4, #16]
 8000644:	b9b3      	cbnz	r3, 8000674 <tick+0x4e>
        btt->btn_flag = false;
        btt->btn_timer = HAL_GetTick();
        btt->btn_hold_timer = HAL_GetTick();
    }

    if (!btt->btn_flag && btn_state && (HAL_GetTick() - btt->btn_hold_timer >= 200) && !btt->btn_hold) {
 8000646:	7c23      	ldrb	r3, [r4, #16]
 8000648:	b903      	cbnz	r3, 800064c <tick+0x26>
 800064a:	bb15      	cbnz	r5, 8000692 <tick+0x6c>
        btt->btn_hold = true;
        btt->btn_hold_timer = HAL_GetTick();
    }

    return btn_state;
}
 800064c:	4630      	mov	r0, r6
 800064e:	bd70      	pop	{r4, r5, r6, pc}
    if (!btn_state && !btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 8000650:	f000 fc78 	bl	8000f44 <HAL_GetTick>
 8000654:	68a3      	ldr	r3, [r4, #8]
 8000656:	1ac0      	subs	r0, r0, r3
 8000658:	2864      	cmp	r0, #100	@ 0x64
 800065a:	d9f1      	bls.n	8000640 <tick+0x1a>
        btt->btn_flag = true;
 800065c:	2301      	movs	r3, #1
 800065e:	7423      	strb	r3, [r4, #16]
        if(!btt->btn_hold){btt->btn_single = true;}
 8000660:	7c63      	ldrb	r3, [r4, #17]
 8000662:	b90b      	cbnz	r3, 8000668 <tick+0x42>
 8000664:	2301      	movs	r3, #1
 8000666:	74e3      	strb	r3, [r4, #19]
        btt->btn_hold = false;
 8000668:	2300      	movs	r3, #0
 800066a:	7463      	strb	r3, [r4, #17]
        btt->btn_timer = HAL_GetTick();
 800066c:	f000 fc6a 	bl	8000f44 <HAL_GetTick>
 8000670:	60a0      	str	r0, [r4, #8]
 8000672:	e7e5      	b.n	8000640 <tick+0x1a>
    if (btn_state && btt->btn_flag && HAL_GetTick() - btt->btn_timer > 100) {
 8000674:	f000 fc66 	bl	8000f44 <HAL_GetTick>
 8000678:	68a3      	ldr	r3, [r4, #8]
 800067a:	1ac0      	subs	r0, r0, r3
 800067c:	2864      	cmp	r0, #100	@ 0x64
 800067e:	d9e2      	bls.n	8000646 <tick+0x20>
        btt->btn_flag = false;
 8000680:	2300      	movs	r3, #0
 8000682:	7423      	strb	r3, [r4, #16]
        btt->btn_timer = HAL_GetTick();
 8000684:	f000 fc5e 	bl	8000f44 <HAL_GetTick>
 8000688:	60a0      	str	r0, [r4, #8]
        btt->btn_hold_timer = HAL_GetTick();
 800068a:	f000 fc5b 	bl	8000f44 <HAL_GetTick>
 800068e:	60e0      	str	r0, [r4, #12]
 8000690:	e7d9      	b.n	8000646 <tick+0x20>
    if (!btt->btn_flag && btn_state && (HAL_GetTick() - btt->btn_hold_timer >= 200) && !btt->btn_hold) {
 8000692:	f000 fc57 	bl	8000f44 <HAL_GetTick>
 8000696:	68e3      	ldr	r3, [r4, #12]
 8000698:	1ac0      	subs	r0, r0, r3
 800069a:	28c7      	cmp	r0, #199	@ 0xc7
 800069c:	d9d6      	bls.n	800064c <tick+0x26>
 800069e:	7c63      	ldrb	r3, [r4, #17]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1d3      	bne.n	800064c <tick+0x26>
        btt->btn_hold = true;
 80006a4:	2301      	movs	r3, #1
 80006a6:	7463      	strb	r3, [r4, #17]
        btt->btn_hold_timer = HAL_GetTick();
 80006a8:	f000 fc4c 	bl	8000f44 <HAL_GetTick>
 80006ac:	60e0      	str	r0, [r4, #12]
 80006ae:	e7cd      	b.n	800064c <tick+0x26>

080006b0 <isClicked>:

bool isClicked(Button *btt){
 80006b0:	4603      	mov	r3, r0
    if(btt->btn_single){
 80006b2:	7cc0      	ldrb	r0, [r0, #19]
 80006b4:	b900      	cbnz	r0, 80006b8 <isClicked+0x8>
        btt->btn_single = false;
        return true;
    } return false;
}
 80006b6:	4770      	bx	lr
        btt->btn_single = false;
 80006b8:	2200      	movs	r2, #0
 80006ba:	74da      	strb	r2, [r3, #19]
        return true;
 80006bc:	e7fb      	b.n	80006b6 <isClicked+0x6>
	...

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006c4:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	ad04      	add	r5, sp, #16
 80006c8:	2400      	movs	r4, #0
 80006ca:	9404      	str	r4, [sp, #16]
 80006cc:	9405      	str	r4, [sp, #20]
 80006ce:	9406      	str	r4, [sp, #24]
 80006d0:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <MX_GPIO_Init+0xc4>)
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	f042 0210 	orr.w	r2, r2, #16
 80006da:	619a      	str	r2, [r3, #24]
 80006dc:	699a      	ldr	r2, [r3, #24]
 80006de:	f002 0210 	and.w	r2, r2, #16
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	699a      	ldr	r2, [r3, #24]
 80006e8:	f042 0220 	orr.w	r2, r2, #32
 80006ec:	619a      	str	r2, [r3, #24]
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	f002 0220 	and.w	r2, r2, #32
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	699a      	ldr	r2, [r3, #24]
 80006fa:	f042 0204 	orr.w	r2, r2, #4
 80006fe:	619a      	str	r2, [r3, #24]
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	f002 0204 	and.w	r2, r2, #4
 8000706:	9202      	str	r2, [sp, #8]
 8000708:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	699a      	ldr	r2, [r3, #24]
 800070c:	f042 0208 	orr.w	r2, r2, #8
 8000710:	619a      	str	r2, [r3, #24]
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	9303      	str	r3, [sp, #12]
 800071a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|PH1L_Pin|PH2L_Pin|PH3L_Pin, GPIO_PIN_RESET);
 800071c:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 8000788 <MX_GPIO_Init+0xc8>
 8000720:	4622      	mov	r2, r4
 8000722:	f44f 510e 	mov.w	r1, #9088	@ 0x2380
 8000726:	4648      	mov	r0, r9
 8000728:	f001 fa49 	bl	8001bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Start_Stop_LED_GPIO_Port, Start_Stop_LED_Pin, GPIO_PIN_RESET);
 800072c:	4e17      	ldr	r6, [pc, #92]	@ (800078c <MX_GPIO_Init+0xcc>)
 800072e:	4622      	mov	r2, r4
 8000730:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000734:	4630      	mov	r0, r6
 8000736:	f001 fa42 	bl	8001bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PH1L_Pin PH2L_Pin PH3L_Pin */
  GPIO_InitStruct.Pin = LED_Pin|PH1L_Pin|PH2L_Pin|PH3L_Pin;
 800073a:	f44f 530e 	mov.w	r3, #9088	@ 0x2380
 800073e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2701      	movs	r7, #1
 8000742:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	f04f 0802 	mov.w	r8, #2
 800074a:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	4629      	mov	r1, r5
 8000750:	4648      	mov	r0, r9
 8000752:	f001 f923 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : Start_Stop_BTT_Pin H1_Pin H2_Pin H3_Pin */
  GPIO_InitStruct.Pin = Start_Stop_BTT_Pin|H1_Pin|H2_Pin|H3_Pin;
 8000756:	f44f 4364 	mov.w	r3, #58368	@ 0xe400
 800075a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075e:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	4629      	mov	r1, r5
 8000762:	4630      	mov	r0, r6
 8000764:	f001 f91a 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : Start_Stop_LED_Pin */
  GPIO_InitStruct.Pin = Start_Stop_LED_Pin;
 8000768:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800076c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(Start_Stop_LED_GPIO_Port, &GPIO_InitStruct);
 8000776:	4629      	mov	r1, r5
 8000778:	4630      	mov	r0, r6
 800077a:	f001 f90f 	bl	800199c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800077e:	b009      	add	sp, #36	@ 0x24
 8000780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	40011000 	.word	0x40011000
 800078c:	40010c00 	.word	0x40010c00

08000790 <MX_DMA_Init>:
{
 8000790:	b500      	push	{lr}
 8000792:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_DMA_Init+0x30>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	f042 0201 	orr.w	r2, r2, #1
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	4611      	mov	r1, r2
 80007ac:	200b      	movs	r0, #11
 80007ae:	f000 ff9d 	bl	80016ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007b2:	200b      	movs	r0, #11
 80007b4:	f000 ffaa 	bl	800170c <HAL_NVIC_EnableIRQ>
}
 80007b8:	b003      	add	sp, #12
 80007ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <map>:

/* USER CODE BEGIN 4 */
uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007c4:	eba0 0c01 	sub.w	ip, r0, r1
 80007c8:	9800      	ldr	r0, [sp, #0]
 80007ca:	1ac0      	subs	r0, r0, r3
 80007cc:	fb00 fc0c 	mul.w	ip, r0, ip
 80007d0:	1a52      	subs	r2, r2, r1
 80007d2:	fbbc fcf2 	udiv	ip, ip, r2
}
 80007d6:	eb0c 0003 	add.w	r0, ip, r3
 80007da:	4770      	bx	lr

080007dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e0:	b082      	sub	sp, #8
  // Get hall values
  uint8_t old_halls = hall_value;
 80007e2:	4f4f      	ldr	r7, [pc, #316]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80007e4:	783d      	ldrb	r5, [r7, #0]
  uint8_t hall_a = (HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin) == GPIO_PIN_SET) ? 1 : 0;
 80007e6:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8000924 <HAL_TIM_PeriodElapsedCallback+0x148>
 80007ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ee:	4640      	mov	r0, r8
 80007f0:	f001 f9de 	bl	8001bb0 <HAL_GPIO_ReadPin>
 80007f4:	2801      	cmp	r0, #1
 80007f6:	bf14      	ite	ne
 80007f8:	2600      	movne	r6, #0
 80007fa:	2601      	moveq	r6, #1
  uint8_t hall_b = (HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin) == GPIO_PIN_SET) ? 1 : 0;
 80007fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000800:	4640      	mov	r0, r8
 8000802:	f001 f9d5 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000806:	2801      	cmp	r0, #1
 8000808:	bf14      	ite	ne
 800080a:	2400      	movne	r4, #0
 800080c:	2401      	moveq	r4, #1
  uint8_t hall_c = (HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin) == GPIO_PIN_SET) ? 1 : 0;
 800080e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000812:	4640      	mov	r0, r8
 8000814:	f001 f9cc 	bl	8001bb0 <HAL_GPIO_ReadPin>
 8000818:	2801      	cmp	r0, #1
 800081a:	bf14      	ite	ne
 800081c:	2300      	movne	r3, #0
 800081e:	2301      	moveq	r3, #1

  hall_value = (hall_c << 2) | (hall_b << 1) | hall_a;
 8000820:	0060      	lsls	r0, r4, #1
 8000822:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
 8000826:	4330      	orrs	r0, r6
 8000828:	7038      	strb	r0, [r7, #0]
 
  // Get gase value and update current
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_value, 1);
 800082a:	4c3f      	ldr	r4, [pc, #252]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800082c:	2201      	movs	r2, #1
 800082e:	4621      	mov	r1, r4
 8000830:	483e      	ldr	r0, [pc, #248]	@ (800092c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000832:	f000 fd31 	bl	8001298 <HAL_ADC_Start_DMA>

  uint16_t gase_value = constrain(adc_value, gase_zero_pos, gase_max_pos);
 8000836:	8820      	ldrh	r0, [r4, #0]
 8000838:	4b3d      	ldr	r3, [pc, #244]	@ (8000930 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800083a:	6819      	ldr	r1, [r3, #0]
 800083c:	4288      	cmp	r0, r1
 800083e:	d360      	bcc.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x126>
 8000840:	4b3c      	ldr	r3, [pc, #240]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4298      	cmp	r0, r3
 8000846:	bf28      	it	cs
 8000848:	4618      	movcs	r0, r3
 800084a:	b280      	uxth	r0, r0
  target_duty = map(gase_value, gase_zero_pos, gase_max_pos, 0, 2299);  
 800084c:	f640 03fb 	movw	r3, #2299	@ 0x8fb
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	4a37      	ldr	r2, [pc, #220]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	f7ff ffb4 	bl	80007c4 <map>
 800085c:	4b36      	ldr	r3, [pc, #216]	@ (8000938 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800085e:	8018      	strh	r0, [r3, #0]

  if(!isMotorEnabled){target_duty = 0;}
 8000860:	4b36      	ldr	r3, [pc, #216]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b913      	cbnz	r3, 800086c <HAL_TIM_PeriodElapsedCallback+0x90>
 8000866:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000868:	2200      	movs	r2, #0
 800086a:	801a      	strh	r2, [r3, #0]

  duty_dt++;
 800086c:	4a34      	ldr	r2, [pc, #208]	@ (8000940 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800086e:	8813      	ldrh	r3, [r2, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	b29b      	uxth	r3, r3
 8000874:	8013      	strh	r3, [r2, #0]
  if(duty_dt >= 319){
 8000876:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800087a:	d919      	bls.n	80008b0 <HAL_TIM_PeriodElapsedCallback+0xd4>
    duty_dt = 0;
 800087c:	4613      	mov	r3, r2
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]
    int16_t diff = target_duty - duty;
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000884:	881f      	ldrh	r7, [r3, #0]
 8000886:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000888:	881e      	ldrh	r6, [r3, #0]
 800088a:	1bbc      	subs	r4, r7, r6
 800088c:	b224      	sxth	r4, r4

    if (fabs(diff) <= MAX_DUTY_DELTA){
 800088e:	4620      	mov	r0, r4
 8000890:	f7ff fd8e 	bl	80003b0 <__aeabi_i2d>
 8000894:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000898:	2200      	movs	r2, #0
 800089a:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800089c:	f7ff fe5c 	bl	8000558 <__aeabi_dcmple>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d030      	beq.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x12a>
      duty = target_duty;
 80008a4:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008a6:	801f      	strh	r7, [r3, #0]
    }else{
      duty += (diff > 0 ? MAX_DUTY_DELTA : -MAX_DUTY_DELTA);
    }
    MC_SetDuty(duty);
 80008a8:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008aa:	8818      	ldrh	r0, [r3, #0]
 80008ac:	f000 fafe 	bl	8000eac <MC_SetDuty>
  }
  // Apply 
  if(old_halls != hall_value){
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80008b2:	7818      	ldrb	r0, [r3, #0]
 80008b4:	42a8      	cmp	r0, r5
 80008b6:	d130      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x13e>
    MC_LoadStep(hall_value);
  }
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80008b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008bc:	4823      	ldr	r0, [pc, #140]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80008be:	f001 f984 	bl	8001bca <HAL_GPIO_TogglePin>

  HAL_PWR_EnableBkUpAccess();
 80008c2:	f001 faad 	bl	8001e20 <HAL_PWR_EnableBkUpAccess>

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, isMotorEnabled);
 80008c6:	4c22      	ldr	r4, [pc, #136]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80008c8:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4620      	mov	r0, r4
 80008d0:	f001 ff7c 	bl	80027cc <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, target_duty);
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	2102      	movs	r1, #2
 80008da:	4620      	mov	r0, r4
 80008dc:	f001 ff76 	bl	80027cc <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, duty);
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	2103      	movs	r1, #3
 80008e6:	4620      	mov	r0, r4
 80008e8:	f001 ff70 	bl	80027cc <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, 0xAA55);
 80008ec:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80008f0:	2104      	movs	r1, #4
 80008f2:	4620      	mov	r0, r4
 80008f4:	f001 ff6a 	bl	80027cc <HAL_RTCEx_BKUPWrite>

  HAL_PWR_DisableBkUpAccess();
 80008f8:	f001 fa98 	bl	8001e2c <HAL_PWR_DisableBkUpAccess>
}
 80008fc:	b002      	add	sp, #8
 80008fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint16_t gase_value = constrain(adc_value, gase_zero_pos, gase_max_pos);
 8000902:	b288      	uxth	r0, r1
 8000904:	e7a2      	b.n	800084c <HAL_TIM_PeriodElapsedCallback+0x70>
      duty += (diff > 0 ? MAX_DUTY_DELTA : -MAX_DUTY_DELTA);
 8000906:	2c00      	cmp	r4, #0
 8000908:	dd04      	ble.n	8000914 <HAL_TIM_PeriodElapsedCallback+0x138>
 800090a:	2308      	movs	r3, #8
 800090c:	441e      	add	r6, r3
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000910:	801e      	strh	r6, [r3, #0]
 8000912:	e7c9      	b.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8000914:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000918:	e7f8      	b.n	800090c <HAL_TIM_PeriodElapsedCallback+0x130>
    MC_LoadStep(hall_value);
 800091a:	f000 f9f9 	bl	8000d10 <MC_LoadStep>
 800091e:	e7cb      	b.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0xdc>
 8000920:	2000004a 	.word	0x2000004a
 8000924:	40010c00 	.word	0x40010c00
 8000928:	20000048 	.word	0x20000048
 800092c:	200000fc 	.word	0x200000fc
 8000930:	20000018 	.word	0x20000018
 8000934:	20000014 	.word	0x20000014
 8000938:	20000046 	.word	0x20000046
 800093c:	20000044 	.word	0x20000044
 8000940:	2000004c 	.word	0x2000004c
 8000944:	2000004e 	.word	0x2000004e
 8000948:	40200000 	.word	0x40200000
 800094c:	40011000 	.word	0x40011000
 8000950:	20000098 	.word	0x20000098

08000954 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000956:	e7fe      	b.n	8000956 <Error_Handler+0x2>

08000958 <MX_ADC1_Init>:
{
 8000958:	b500      	push	{lr}
 800095a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800095c:	2300      	movs	r3, #0
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000964:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <MX_ADC1_Init+0x4c>)
 8000966:	4a10      	ldr	r2, [pc, #64]	@ (80009a8 <MX_ADC1_Init+0x50>)
 8000968:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800096c:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800096e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000974:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000976:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097c:	f000 fd50 	bl	8001420 <HAL_ADC_Init>
 8000980:	b960      	cbnz	r0, 800099c <MX_ADC1_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_0;
 8000982:	2300      	movs	r3, #0
 8000984:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000986:	2201      	movs	r2, #1
 8000988:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800098a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	a901      	add	r1, sp, #4
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_ADC1_Init+0x4c>)
 8000990:	f000 fb9e 	bl	80010d0 <HAL_ADC_ConfigChannel>
 8000994:	b920      	cbnz	r0, 80009a0 <MX_ADC1_Init+0x48>
}
 8000996:	b005      	add	sp, #20
 8000998:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800099c:	f7ff ffda 	bl	8000954 <Error_Handler>
    Error_Handler();
 80009a0:	f7ff ffd8 	bl	8000954 <Error_Handler>
 80009a4:	200000fc 	.word	0x200000fc
 80009a8:	40012400 	.word	0x40012400

080009ac <MX_TIM1_Init>:
{
 80009ac:	b510      	push	{r4, lr}
 80009ae:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b0:	2400      	movs	r4, #0
 80009b2:	9412      	str	r4, [sp, #72]	@ 0x48
 80009b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80009b6:	9414      	str	r4, [sp, #80]	@ 0x50
 80009b8:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	9410      	str	r4, [sp, #64]	@ 0x40
 80009bc:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	9409      	str	r4, [sp, #36]	@ 0x24
 80009c0:	940a      	str	r4, [sp, #40]	@ 0x28
 80009c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80009c4:	940c      	str	r4, [sp, #48]	@ 0x30
 80009c6:	940d      	str	r4, [sp, #52]	@ 0x34
 80009c8:	940e      	str	r4, [sp, #56]	@ 0x38
 80009ca:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009cc:	2220      	movs	r2, #32
 80009ce:	4621      	mov	r1, r4
 80009d0:	a801      	add	r0, sp, #4
 80009d2:	f002 fbd6 	bl	8003182 <memset>
  htim1.Instance = TIM1;
 80009d6:	4832      	ldr	r0, [pc, #200]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 80009d8:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <MX_TIM1_Init+0xf8>)
 80009da:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80009dc:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 2399;
 80009e0:	f640 135f 	movw	r3, #2399	@ 0x95f
 80009e4:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e8:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ec:	f002 f8d0 	bl	8002b90 <HAL_TIM_Base_Init>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d144      	bne.n	8000a7e <MX_TIM1_Init+0xd2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f8:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009fa:	a912      	add	r1, sp, #72	@ 0x48
 80009fc:	4828      	ldr	r0, [pc, #160]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 80009fe:	f002 f9c7 	bl	8002d90 <HAL_TIM_ConfigClockSource>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d13d      	bne.n	8000a82 <MX_TIM1_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a06:	4826      	ldr	r0, [pc, #152]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 8000a08:	f002 f8ee 	bl	8002be8 <HAL_TIM_PWM_Init>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d13a      	bne.n	8000a86 <MX_TIM1_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a16:	a910      	add	r1, sp, #64	@ 0x40
 8000a18:	4821      	ldr	r0, [pc, #132]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 8000a1a:	f002 faf3 	bl	8003004 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d133      	bne.n	8000a8a <MX_TIM1_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a22:	2360      	movs	r3, #96	@ 0x60
 8000a24:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000a26:	2200      	movs	r2, #0
 8000a28:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2a:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2c:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2e:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a30:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a32:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a34:	a909      	add	r1, sp, #36	@ 0x24
 8000a36:	481a      	ldr	r0, [pc, #104]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 8000a38:	f002 f930 	bl	8002c9c <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	bb38      	cbnz	r0, 8000a8e <MX_TIM1_Init+0xe2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	a909      	add	r1, sp, #36	@ 0x24
 8000a42:	4817      	ldr	r0, [pc, #92]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 8000a44:	f002 f92a 	bl	8002c9c <HAL_TIM_PWM_ConfigChannel>
 8000a48:	bb18      	cbnz	r0, 8000a92 <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	a909      	add	r1, sp, #36	@ 0x24
 8000a4e:	4814      	ldr	r0, [pc, #80]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 8000a50:	f002 f924 	bl	8002c9c <HAL_TIM_PWM_ConfigChannel>
 8000a54:	b9f8      	cbnz	r0, 8000a96 <MX_TIM1_Init+0xea>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a5a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a5c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a5e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a60:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a66:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a68:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a6a:	a901      	add	r1, sp, #4
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 8000a6e:	f002 faff 	bl	8003070 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a72:	b990      	cbnz	r0, 8000a9a <MX_TIM1_Init+0xee>
  HAL_TIM_MspPostInit(&htim1);
 8000a74:	480a      	ldr	r0, [pc, #40]	@ (8000aa0 <MX_TIM1_Init+0xf4>)
 8000a76:	f001 f9ab 	bl	8001dd0 <HAL_TIM_MspPostInit>
}
 8000a7a:	b016      	add	sp, #88	@ 0x58
 8000a7c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a7e:	f7ff ff69 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000a82:	f7ff ff67 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000a86:	f7ff ff65 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000a8a:	f7ff ff63 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000a8e:	f7ff ff61 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000a92:	f7ff ff5f 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000a96:	f7ff ff5d 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000a9a:	f7ff ff5b 	bl	8000954 <Error_Handler>
 8000a9e:	bf00      	nop
 8000aa0:	20000050 	.word	0x20000050
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <MX_RTC_Init>:
{
 8000aa8:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <MX_RTC_Init+0x20>)
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_RTC_Init+0x24>)
 8000aae:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aba:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000abc:	f001 fe2e 	bl	800271c <HAL_RTC_Init>
 8000ac0:	b900      	cbnz	r0, 8000ac4 <MX_RTC_Init+0x1c>
}
 8000ac2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ac4:	f7ff ff46 	bl	8000954 <Error_Handler>
 8000ac8:	20000098 	.word	0x20000098
 8000acc:	40002800 	.word	0x40002800

08000ad0 <MX_IWDG_Init>:
{
 8000ad0:	b508      	push	{r3, lr}
  hiwdg.Instance = IWDG;
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_IWDG_Init+0x1c>)
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_IWDG_Init+0x20>)
 8000ad6:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 80;
 8000adc:	2350      	movs	r3, #80	@ 0x50
 8000ade:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ae0:	f001 f87c 	bl	8001bdc <HAL_IWDG_Init>
 8000ae4:	b900      	cbnz	r0, 8000ae8 <MX_IWDG_Init+0x18>
}
 8000ae6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ae8:	f7ff ff34 	bl	8000954 <Error_Handler>
 8000aec:	200000ac 	.word	0x200000ac
 8000af0:	40003000 	.word	0x40003000

08000af4 <SystemClock_Config>:
{
 8000af4:	b510      	push	{r4, lr}
 8000af6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af8:	ac0a      	add	r4, sp, #40	@ 0x28
 8000afa:	2228      	movs	r2, #40	@ 0x28
 8000afc:	2100      	movs	r1, #0
 8000afe:	4620      	mov	r0, r4
 8000b00:	f002 fb3f 	bl	8003182 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	2300      	movs	r3, #0
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	9306      	str	r3, [sp, #24]
 8000b0a:	9307      	str	r3, [sp, #28]
 8000b0c:	9308      	str	r3, [sp, #32]
 8000b0e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	9303      	str	r3, [sp, #12]
 8000b16:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b18:	2309      	movs	r3, #9
 8000b1a:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b20:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b22:	2201      	movs	r2, #1
 8000b24:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b26:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2202      	movs	r2, #2
 8000b2a:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2c:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b2e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b32:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	4620      	mov	r0, r4
 8000b36:	f001 f995 	bl	8001e64 <HAL_RCC_OscConfig>
 8000b3a:	b9e8      	cbnz	r0, 8000b78 <SystemClock_Config+0x84>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2102      	movs	r1, #2
 8000b42:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b4c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b50:	a805      	add	r0, sp, #20
 8000b52:	f001 fbbf 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000b56:	b988      	cbnz	r0, 8000b7c <SystemClock_Config+0x88>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b60:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b66:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b68:	a801      	add	r0, sp, #4
 8000b6a:	f001 fc91 	bl	8002490 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	b938      	cbnz	r0, 8000b80 <SystemClock_Config+0x8c>
  HAL_RCC_EnableCSS();
 8000b70:	f001 fb80 	bl	8002274 <HAL_RCC_EnableCSS>
}
 8000b74:	b014      	add	sp, #80	@ 0x50
 8000b76:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b78:	f7ff feec 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000b7c:	f7ff feea 	bl	8000954 <Error_Handler>
    Error_Handler();
 8000b80:	f7ff fee8 	bl	8000954 <Error_Handler>

08000b84 <main>:
{
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8000b86:	f000 f9bf 	bl	8000f08 <HAL_Init>
  SystemClock_Config();
 8000b8a:	f7ff ffb3 	bl	8000af4 <SystemClock_Config>
  MX_GPIO_Init();
 8000b8e:	f7ff fd97 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b92:	f7ff fdfd 	bl	8000790 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b96:	f7ff fedf 	bl	8000958 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b9a:	f7ff ff07 	bl	80009ac <MX_TIM1_Init>
  MX_IWDG_Init();
 8000b9e:	f7ff ff97 	bl	8000ad0 <MX_IWDG_Init>
  MX_RTC_Init();
 8000ba2:	f7ff ff81 	bl	8000aa8 <MX_RTC_Init>
  HAL_ADC_Stop(&hadc1);
 8000ba6:	4c31      	ldr	r4, [pc, #196]	@ (8000c6c <main+0xe8>)
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f000 fcbd 	bl	8001528 <HAL_ADC_Stop>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f000 fcd4 	bl	800155c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_value, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	492e      	ldr	r1, [pc, #184]	@ (8000c70 <main+0xec>)
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f000 fb6d 	bl	8001298 <HAL_ADC_Start_DMA>
  uint16_t motorEnBackupValue = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 8000bbe:	4c2d      	ldr	r4, [pc, #180]	@ (8000c74 <main+0xf0>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f001 fe0a 	bl	80027dc <HAL_RTCEx_BKUPRead>
 8000bc8:	b285      	uxth	r5, r0
  uint16_t targetDutyBackupValue = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f001 fe05 	bl	80027dc <HAL_RTCEx_BKUPRead>
 8000bd2:	b286      	uxth	r6, r0
  uint16_t realDutyBackupValue = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f001 fe00 	bl	80027dc <HAL_RTCEx_BKUPRead>
 8000bdc:	b287      	uxth	r7, r0
  uint16_t code = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 8000bde:	2104      	movs	r1, #4
 8000be0:	4620      	mov	r0, r4
 8000be2:	f001 fdfb 	bl	80027dc <HAL_RTCEx_BKUPRead>
 8000be6:	b283      	uxth	r3, r0
  if(code == 0xAA55){
 8000be8:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d018      	beq.n	8000c22 <main+0x9e>
  init(&start_stop_btt);
 8000bf0:	4821      	ldr	r0, [pc, #132]	@ (8000c78 <main+0xf4>)
 8000bf2:	f7ff fd15 	bl	8000620 <init>
  HAL_GPIO_WritePin(Start_Stop_LED_GPIO_Port, Start_Stop_LED_Pin, isMotorEnabled);
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <main+0xf8>)
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bfe:	4820      	ldr	r0, [pc, #128]	@ (8000c80 <main+0xfc>)
 8000c00:	f000 ffdd 	bl	8001bbe <HAL_GPIO_WritePin>
  MC_DisablePWM();
 8000c04:	f000 f844 	bl	8000c90 <MC_DisablePWM>
  MC_InitPWM();
 8000c08:	f000 f866 	bl	8000cd8 <MC_InitPWM>
  MC_SetDuty(0);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 f94d 	bl	8000eac <MC_SetDuty>
  MC_LoadStep(1);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 f87c 	bl	8000d10 <MC_LoadStep>
  MC_EnablePWM();
 8000c18:	f000 f84c 	bl	8000cb4 <MC_EnablePWM>
  MX_IWDG_Init();
 8000c1c:	f7ff ff58 	bl	8000ad0 <MX_IWDG_Init>
 8000c20:	e00e      	b.n	8000c40 <main+0xbc>
    isMotorEnabled = motorEnBackupValue;
 8000c22:	3d00      	subs	r5, #0
 8000c24:	bf18      	it	ne
 8000c26:	2501      	movne	r5, #1
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <main+0xf8>)
 8000c2a:	701d      	strb	r5, [r3, #0]
    target_duty = targetDutyBackupValue;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <main+0x100>)
 8000c2e:	801e      	strh	r6, [r3, #0]
    duty = realDutyBackupValue;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <main+0x104>)
 8000c32:	801f      	strh	r7, [r3, #0]
 8000c34:	e7dc      	b.n	8000bf0 <main+0x6c>
		  Error_Handler();
 8000c36:	f7ff fe8d 	bl	8000954 <Error_Handler>
    tick(&start_stop_btt);
 8000c3a:	480f      	ldr	r0, [pc, #60]	@ (8000c78 <main+0xf4>)
 8000c3c:	f7ff fcf3 	bl	8000626 <tick>
    if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK){
 8000c40:	4812      	ldr	r0, [pc, #72]	@ (8000c8c <main+0x108>)
 8000c42:	f000 fff9 	bl	8001c38 <HAL_IWDG_Refresh>
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d1f5      	bne.n	8000c36 <main+0xb2>
    if(isClicked(&start_stop_btt)){
 8000c4a:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <main+0xf4>)
 8000c4c:	f7ff fd30 	bl	80006b0 <isClicked>
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d0f2      	beq.n	8000c3a <main+0xb6>
      isMotorEnabled = !isMotorEnabled;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <main+0xf8>)
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	f082 0201 	eor.w	r2, r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(Start_Stop_LED_GPIO_Port, Start_Stop_LED_Pin, isMotorEnabled);
 8000c5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c62:	4807      	ldr	r0, [pc, #28]	@ (8000c80 <main+0xfc>)
 8000c64:	f000 ffab 	bl	8001bbe <HAL_GPIO_WritePin>
 8000c68:	e7e7      	b.n	8000c3a <main+0xb6>
 8000c6a:	bf00      	nop
 8000c6c:	200000fc 	.word	0x200000fc
 8000c70:	20000048 	.word	0x20000048
 8000c74:	20000098 	.word	0x20000098
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000044 	.word	0x20000044
 8000c80:	40010c00 	.word	0x40010c00
 8000c84:	20000046 	.word	0x20000046
 8000c88:	2000004e 	.word	0x2000004e
 8000c8c:	200000ac 	.word	0x200000ac

08000c90 <MC_DisablePWM>:
#include "main.h"
#include "six_step.h"

extern TIM_HandleTypeDef htim1;

void MC_DisablePWM(void){
 8000c90:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000c92:	4c07      	ldr	r4, [pc, #28]	@ (8000cb0 <MC_DisablePWM+0x20>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	4620      	mov	r0, r4
 8000c98:	f002 f972 	bl	8002f80 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f002 f96e 	bl	8002f80 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f002 f96a 	bl	8002f80 <HAL_TIM_PWM_Stop>
}
 8000cac:	bd10      	pop	{r4, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000050 	.word	0x20000050

08000cb4 <MC_EnablePWM>:

void MC_EnablePWM(void){
 8000cb4:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cb6:	4c07      	ldr	r4, [pc, #28]	@ (8000cd4 <MC_EnablePWM+0x20>)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f002 f8f6 	bl	8002eac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f002 f8f2 	bl	8002eac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cc8:	2108      	movs	r1, #8
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f002 f8ee 	bl	8002eac <HAL_TIM_PWM_Start>
}
 8000cd0:	bd10      	pop	{r4, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000050 	.word	0x20000050

08000cd8 <MC_InitPWM>:

void MC_InitPWM(void){
 8000cd8:	b510      	push	{r4, lr}
    TIM1->CCR1 = 0;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MC_InitPWM+0x30>)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	6359      	str	r1, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 8000ce0:	6399      	str	r1, [r3, #56]	@ 0x38
    TIM1->CCR3 = 0;
 8000ce2:	63d9      	str	r1, [r3, #60]	@ 0x3c
    TIM1->CCR4 = 1;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ce8:	4c08      	ldr	r4, [pc, #32]	@ (8000d0c <MC_InitPWM+0x34>)
 8000cea:	4620      	mov	r0, r4
 8000cec:	f002 f8de 	bl	8002eac <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f002 f8da 	bl	8002eac <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f002 f8d6 	bl	8002eac <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim1);
 8000d00:	4620      	mov	r0, r4
 8000d02:	f001 fe1d 	bl	8002940 <HAL_TIM_Base_Start_IT>
}
 8000d06:	bd10      	pop	{r4, pc}
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	20000050 	.word	0x20000050

08000d10 <MC_LoadStep>:

void MC_LoadStep(uint8_t step){
 8000d10:	b538      	push	{r3, r4, r5, lr}
    switch (step) {
 8000d12:	3801      	subs	r0, #1
 8000d14:	2805      	cmp	r0, #5
 8000d16:	d823      	bhi.n	8000d60 <MC_LoadStep+0x50>
 8000d18:	e8df f000 	tbb	[pc, r0]
 8000d1c:	03638343 	.word	0x03638343
 8000d20:	a323      	.short	0xa323
        case 4:
            // Z L H
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000d22:	4d60      	ldr	r5, [pc, #384]	@ (8000ea4 <MC_LoadStep+0x194>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	4628      	mov	r0, r5
 8000d28:	f002 f92a 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 8000d2c:	4c5e      	ldr	r4, [pc, #376]	@ (8000ea8 <MC_LoadStep+0x198>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	4620      	mov	r0, r4
 8000d34:	f000 ff43 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f002 f920 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d46:	4620      	mov	r0, r4
 8000d48:	f000 ff39 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4628      	mov	r0, r5
 8000d50:	f002 f8ac 	bl	8002eac <HAL_TIM_PWM_Start>
            HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f000 ff2f 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
            break;
        default:
            break;
    }
}
 8000d60:	bd38      	pop	{r3, r4, r5, pc}
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d62:	4d50      	ldr	r5, [pc, #320]	@ (8000ea4 <MC_LoadStep+0x194>)
 8000d64:	2100      	movs	r1, #0
 8000d66:	4628      	mov	r0, r5
 8000d68:	f002 f8a0 	bl	8002eac <HAL_TIM_PWM_Start>
            HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 8000d6c:	4c4e      	ldr	r4, [pc, #312]	@ (8000ea8 <MC_LoadStep+0x198>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2180      	movs	r1, #128	@ 0x80
 8000d72:	4620      	mov	r0, r4
 8000d74:	f000 ff23 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4628      	mov	r0, r5
 8000d7c:	f002 f900 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	4620      	mov	r0, r4
 8000d88:	f000 ff19 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4628      	mov	r0, r5
 8000d90:	f002 f8f6 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f000 ff0f 	bl	8001bbe <HAL_GPIO_WritePin>
            break;
 8000da0:	e7de      	b.n	8000d60 <MC_LoadStep+0x50>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000da2:	4d40      	ldr	r5, [pc, #256]	@ (8000ea4 <MC_LoadStep+0x194>)
 8000da4:	2100      	movs	r1, #0
 8000da6:	4628      	mov	r0, r5
 8000da8:	f002 f880 	bl	8002eac <HAL_TIM_PWM_Start>
            HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 8000dac:	4c3e      	ldr	r4, [pc, #248]	@ (8000ea8 <MC_LoadStep+0x198>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	2180      	movs	r1, #128	@ 0x80
 8000db2:	4620      	mov	r0, r4
 8000db4:	f000 ff03 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000db8:	2104      	movs	r1, #4
 8000dba:	4628      	mov	r0, r5
 8000dbc:	f002 f8e0 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f000 fef9 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4628      	mov	r0, r5
 8000dd0:	f002 f8d6 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f000 feef 	bl	8001bbe <HAL_GPIO_WritePin>
            break;
 8000de0:	e7be      	b.n	8000d60 <MC_LoadStep+0x50>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000de2:	4d30      	ldr	r5, [pc, #192]	@ (8000ea4 <MC_LoadStep+0x194>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	4628      	mov	r0, r5
 8000de8:	f002 f8ca 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 8000dec:	4c2e      	ldr	r4, [pc, #184]	@ (8000ea8 <MC_LoadStep+0x198>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	2180      	movs	r1, #128	@ 0x80
 8000df2:	4620      	mov	r0, r4
 8000df4:	f000 fee3 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f002 f856 	bl	8002eac <HAL_TIM_PWM_Start>
            HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e06:	4620      	mov	r0, r4
 8000e08:	f000 fed9 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	4628      	mov	r0, r5
 8000e10:	f002 f8b6 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 fecf 	bl	8001bbe <HAL_GPIO_WritePin>
            break;
 8000e20:	e79e      	b.n	8000d60 <MC_LoadStep+0x50>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e22:	4d20      	ldr	r5, [pc, #128]	@ (8000ea4 <MC_LoadStep+0x194>)
 8000e24:	2100      	movs	r1, #0
 8000e26:	4628      	mov	r0, r5
 8000e28:	f002 f8aa 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_RESET);
 8000e2c:	4c1e      	ldr	r4, [pc, #120]	@ (8000ea8 <MC_LoadStep+0x198>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2180      	movs	r1, #128	@ 0x80
 8000e32:	4620      	mov	r0, r4
 8000e34:	f000 fec3 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	f002 f836 	bl	8002eac <HAL_TIM_PWM_Start>
            HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e46:	4620      	mov	r0, r4
 8000e48:	f000 feb9 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f002 f896 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f000 feaf 	bl	8001bbe <HAL_GPIO_WritePin>
            break;
 8000e60:	e77e      	b.n	8000d60 <MC_LoadStep+0x50>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e62:	4d10      	ldr	r5, [pc, #64]	@ (8000ea4 <MC_LoadStep+0x194>)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4628      	mov	r0, r5
 8000e68:	f002 f88a 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_RESET);
 8000e6c:	4c0e      	ldr	r4, [pc, #56]	@ (8000ea8 <MC_LoadStep+0x198>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2180      	movs	r1, #128	@ 0x80
 8000e72:	4620      	mov	r0, r4
 8000e74:	f000 fea3 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000e78:	2104      	movs	r1, #4
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	f002 f880 	bl	8002f80 <HAL_TIM_PWM_Stop>
            HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e86:	4620      	mov	r0, r4
 8000e88:	f000 fe99 	bl	8001bbe <HAL_GPIO_WritePin>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f002 f80c 	bl	8002eac <HAL_TIM_PWM_Start>
            HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 fe8f 	bl	8001bbe <HAL_GPIO_WritePin>
}
 8000ea0:	e75e      	b.n	8000d60 <MC_LoadStep+0x50>
 8000ea2:	bf00      	nop
 8000ea4:	20000050 	.word	0x20000050
 8000ea8:	40011000 	.word	0x40011000

08000eac <MC_SetDuty>:

void MC_SetDuty(uint16_t DutyCycle){
	TIM1->CCR1 = DutyCycle;
 8000eac:	4b02      	ldr	r3, [pc, #8]	@ (8000eb8 <MC_SetDuty+0xc>)
 8000eae:	6358      	str	r0, [r3, #52]	@ 0x34
	TIM1->CCR2 = DutyCycle;
 8000eb0:	6398      	str	r0, [r3, #56]	@ 0x38
	TIM1->CCR3 = DutyCycle;
 8000eb2:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40012c00 	.word	0x40012c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_InitTick+0x40>)
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <HAL_InitTick+0x44>)
 8000ece:	6810      	ldr	r0, [r2, #0]
 8000ed0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ed4:	f000 fc28 	bl	8001728 <HAL_SYSTICK_Config>
 8000ed8:	b968      	cbnz	r0, 8000ef6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	2c0f      	cmp	r4, #15
 8000edc:	d901      	bls.n	8000ee2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
 8000ee0:	e00a      	b.n	8000ef8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eea:	f000 fbff 	bl	80016ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_InitTick+0x48>)
 8000ef0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000ef6:	2001      	movs	r0, #1
}
 8000ef8:	bd10      	pop	{r4, pc}
 8000efa:	bf00      	nop
 8000efc:	2000001c 	.word	0x2000001c
 8000f00:	20000024 	.word	0x20000024
 8000f04:	20000020 	.word	0x20000020

08000f08 <HAL_Init>:
{
 8000f08:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0a:	4a07      	ldr	r2, [pc, #28]	@ (8000f28 <HAL_Init+0x20>)
 8000f0c:	6813      	ldr	r3, [r2, #0]
 8000f0e:	f043 0310 	orr.w	r3, r3, #16
 8000f12:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 fbd7 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f7ff ffce 	bl	8000ebc <HAL_InitTick>
  HAL_MspInit();
 8000f20:	f000 fe90 	bl	8001c44 <HAL_MspInit>
}
 8000f24:	2000      	movs	r0, #0
 8000f26:	bd08      	pop	{r3, pc}
 8000f28:	40022000 	.word	0x40022000

08000f2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f2c:	4a03      	ldr	r2, [pc, #12]	@ (8000f3c <HAL_IncTick+0x10>)
 8000f2e:	6811      	ldr	r1, [r2, #0]
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_IncTick+0x14>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	440b      	add	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2000012c 	.word	0x2000012c
 8000f40:	2000001c 	.word	0x2000001c

08000f44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f44:	4b01      	ldr	r3, [pc, #4]	@ (8000f4c <HAL_GetTick+0x8>)
 8000f46:	6818      	ldr	r0, [r3, #0]
}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000012c 	.word	0x2000012c

08000f50 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f50:	4770      	bx	lr

08000f52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f52:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f54:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f58:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8000f5c:	d11e      	bne.n	8000f9c <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	6892      	ldr	r2, [r2, #8]
 8000f6a:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8000f6e:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8000f72:	d003      	beq.n	8000f7c <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ffeb 	bl	8000f50 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f7a:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f7c:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f7e:	2a00      	cmp	r2, #0
 8000f80:	d1f8      	bne.n	8000f74 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f8c:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8000f90:	d1f0      	bne.n	8000f74 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f9a:	e7eb      	b.n	8000f74 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	4798      	blx	r3
}
 8000fa2:	e7ea      	b.n	8000f7a <ADC_DMAConvCplt+0x28>

08000fa4 <HAL_ADC_ConvHalfCpltCallback>:
}
 8000fa4:	4770      	bx	lr

08000fa6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fa6:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fa8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000faa:	f7ff fffb 	bl	8000fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fae:	bd08      	pop	{r3, pc}

08000fb0 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_ADC_IRQHandler>:
{
 8000fb2:	b570      	push	{r4, r5, r6, lr}
 8000fb4:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8000fb6:	6803      	ldr	r3, [r0, #0]
 8000fb8:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000fba:	685d      	ldr	r5, [r3, #4]
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000fbc:	f015 0f20 	tst.w	r5, #32
 8000fc0:	d017      	beq.n	8000ff2 <HAL_ADC_IRQHandler+0x40>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000fc2:	f016 0f02 	tst.w	r6, #2
 8000fc6:	d014      	beq.n	8000ff2 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000fca:	f012 0f10 	tst.w	r2, #16
 8000fce:	d103      	bne.n	8000fd8 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fd0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8000fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000fd6:	6282      	str	r2, [r0, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8000fde:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8000fe2:	d033      	beq.n	800104c <HAL_ADC_IRQHandler+0x9a>
      HAL_ADC_ConvCpltCallback(hadc);
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff ffb3 	bl	8000f50 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	f06f 0212 	mvn.w	r2, #18
 8000ff0:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000ff2:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8000ff6:	d022      	beq.n	800103e <HAL_ADC_IRQHandler+0x8c>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000ff8:	f016 0f04 	tst.w	r6, #4
 8000ffc:	d01f      	beq.n	800103e <HAL_ADC_IRQHandler+0x8c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ffe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001000:	f013 0f10 	tst.w	r3, #16
 8001004:	d103      	bne.n	800100e <HAL_ADC_IRQHandler+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001006:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001008:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800100c:	62a3      	str	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800100e:	6822      	ldr	r2, [r4, #0]
 8001010:	6893      	ldr	r3, [r2, #8]
 8001012:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001016:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800101a:	d02e      	beq.n	800107a <HAL_ADC_IRQHandler+0xc8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800101c:	6853      	ldr	r3, [r2, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800101e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001022:	d105      	bne.n	8001030 <HAL_ADC_IRQHandler+0x7e>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001024:	6893      	ldr	r3, [r2, #8]
 8001026:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800102a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800102e:	d021      	beq.n	8001074 <HAL_ADC_IRQHandler+0xc2>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001030:	4620      	mov	r0, r4
 8001032:	f000 fb13 	bl	800165c <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	f06f 020c 	mvn.w	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800103e:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001042:	d002      	beq.n	800104a <HAL_ADC_IRQHandler+0x98>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001044:	f016 0f01 	tst.w	r6, #1
 8001048:	d128      	bne.n	800109c <HAL_ADC_IRQHandler+0xea>
}
 800104a:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800104c:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800104e:	2a00      	cmp	r2, #0
 8001050:	d1c8      	bne.n	8000fe4 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	f022 0220 	bic.w	r2, r2, #32
 8001058:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800105a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800105c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001060:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001062:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001064:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001068:	d1bc      	bne.n	8000fe4 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800106a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001072:	e7b7      	b.n	8000fe4 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001074:	7b23      	ldrb	r3, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1da      	bne.n	8001030 <HAL_ADC_IRQHandler+0x7e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800107a:	6853      	ldr	r3, [r2, #4]
 800107c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001080:	6053      	str	r3, [r2, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001082:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001084:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001088:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800108a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800108c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001090:	d1ce      	bne.n	8001030 <HAL_ADC_IRQHandler+0x7e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	62a3      	str	r3, [r4, #40]	@ 0x28
 800109a:	e7c9      	b.n	8001030 <HAL_ADC_IRQHandler+0x7e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800109c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800109e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a2:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff ff83 	bl	8000fb0 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f06f 0201 	mvn.w	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
}
 80010b2:	e7ca      	b.n	800104a <HAL_ADC_IRQHandler+0x98>

080010b4 <HAL_ADC_ErrorCallback>:
}
 80010b4:	4770      	bx	lr

080010b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80010b6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010b8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80010bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010c0:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010ca:	f7ff fff3 	bl	80010b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010ce:	bd08      	pop	{r3, pc}

080010d0 <HAL_ADC_ConfigChannel>:
{ 
 80010d0:	b430      	push	{r4, r5}
 80010d2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80010d4:	2200      	movs	r2, #0
 80010d6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80010d8:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80010dc:	2a01      	cmp	r2, #1
 80010de:	f000 808f 	beq.w	8001200 <HAL_ADC_ConfigChannel+0x130>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2201      	movs	r2, #1
 80010e6:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 80010ea:	684a      	ldr	r2, [r1, #4]
 80010ec:	2a06      	cmp	r2, #6
 80010ee:	d82d      	bhi.n	800114c <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010f0:	6804      	ldr	r4, [r0, #0]
 80010f2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80010f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80010f8:	3a05      	subs	r2, #5
 80010fa:	f04f 0c1f 	mov.w	ip, #31
 80010fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8001102:	ea20 000c 	bic.w	r0, r0, ip
 8001106:	680d      	ldr	r5, [r1, #0]
 8001108:	fa05 f202 	lsl.w	r2, r5, r2
 800110c:	4302      	orrs	r2, r0
 800110e:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001110:	680a      	ldr	r2, [r1, #0]
 8001112:	2a09      	cmp	r2, #9
 8001114:	d938      	bls.n	8001188 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001116:	681c      	ldr	r4, [r3, #0]
 8001118:	68e0      	ldr	r0, [r4, #12]
 800111a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800111e:	3a1e      	subs	r2, #30
 8001120:	f04f 0c07 	mov.w	ip, #7
 8001124:	fa0c fc02 	lsl.w	ip, ip, r2
 8001128:	ea20 000c 	bic.w	r0, r0, ip
 800112c:	688d      	ldr	r5, [r1, #8]
 800112e:	fa05 f202 	lsl.w	r2, r5, r2
 8001132:	4302      	orrs	r2, r0
 8001134:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001136:	680a      	ldr	r2, [r1, #0]
 8001138:	3a10      	subs	r2, #16
 800113a:	2a01      	cmp	r2, #1
 800113c:	d934      	bls.n	80011a8 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001146:	b002      	add	sp, #8
 8001148:	bc30      	pop	{r4, r5}
 800114a:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 800114c:	2a0c      	cmp	r2, #12
 800114e:	d80d      	bhi.n	800116c <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001150:	6805      	ldr	r5, [r0, #0]
 8001152:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001154:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001158:	3a23      	subs	r2, #35	@ 0x23
 800115a:	241f      	movs	r4, #31
 800115c:	4094      	lsls	r4, r2
 800115e:	ea20 0004 	bic.w	r0, r0, r4
 8001162:	680c      	ldr	r4, [r1, #0]
 8001164:	4094      	lsls	r4, r2
 8001166:	4320      	orrs	r0, r4
 8001168:	6328      	str	r0, [r5, #48]	@ 0x30
 800116a:	e7d1      	b.n	8001110 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800116c:	6805      	ldr	r5, [r0, #0]
 800116e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001170:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001174:	3a41      	subs	r2, #65	@ 0x41
 8001176:	241f      	movs	r4, #31
 8001178:	4094      	lsls	r4, r2
 800117a:	ea20 0004 	bic.w	r0, r0, r4
 800117e:	680c      	ldr	r4, [r1, #0]
 8001180:	4094      	lsls	r4, r2
 8001182:	4320      	orrs	r0, r4
 8001184:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8001186:	e7c3      	b.n	8001110 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001188:	681c      	ldr	r4, [r3, #0]
 800118a:	6920      	ldr	r0, [r4, #16]
 800118c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001190:	f04f 0c07 	mov.w	ip, #7
 8001194:	fa0c fc02 	lsl.w	ip, ip, r2
 8001198:	ea20 000c 	bic.w	r0, r0, ip
 800119c:	688d      	ldr	r5, [r1, #8]
 800119e:	fa05 f202 	lsl.w	r2, r5, r2
 80011a2:	4302      	orrs	r2, r0
 80011a4:	6122      	str	r2, [r4, #16]
 80011a6:	e7c6      	b.n	8001136 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4816      	ldr	r0, [pc, #88]	@ (8001204 <HAL_ADC_ConfigChannel+0x134>)
 80011ac:	4282      	cmp	r2, r0
 80011ae:	d005      	beq.n	80011bc <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80011b8:	2001      	movs	r0, #1
 80011ba:	e7c1      	b.n	8001140 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011bc:	6890      	ldr	r0, [r2, #8]
 80011be:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 80011c2:	d11b      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011c4:	6890      	ldr	r0, [r2, #8]
 80011c6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80011ca:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011cc:	680a      	ldr	r2, [r1, #0]
 80011ce:	2a10      	cmp	r2, #16
 80011d0:	d001      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d2:	2000      	movs	r0, #0
 80011d4:	e7b4      	b.n	8001140 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <HAL_ADC_ConfigChannel+0x138>)
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	490c      	ldr	r1, [pc, #48]	@ (800120c <HAL_ADC_ConfigChannel+0x13c>)
 80011dc:	fba1 1202 	umull	r1, r2, r1, r2
 80011e0:	0c92      	lsrs	r2, r2, #18
 80011e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80011e6:	0052      	lsls	r2, r2, #1
 80011e8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80011ea:	e002      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80011ec:	9a01      	ldr	r2, [sp, #4]
 80011ee:	3a01      	subs	r2, #1
 80011f0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80011f2:	9a01      	ldr	r2, [sp, #4]
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	d1f9      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f8:	2000      	movs	r0, #0
 80011fa:	e7a1      	b.n	8001140 <HAL_ADC_ConfigChannel+0x70>
 80011fc:	2000      	movs	r0, #0
 80011fe:	e79f      	b.n	8001140 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001200:	2002      	movs	r0, #2
 8001202:	e7a0      	b.n	8001146 <HAL_ADC_ConfigChannel+0x76>
 8001204:	40012400 	.word	0x40012400
 8001208:	20000024 	.word	0x20000024
 800120c:	431bde83 	.word	0x431bde83

08001210 <ADC_Enable>:
{
 8001210:	b530      	push	{r4, r5, lr}
 8001212:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001218:	6803      	ldr	r3, [r0, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	f012 0f01 	tst.w	r2, #1
 8001220:	d133      	bne.n	800128a <ADC_Enable+0x7a>
 8001222:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <ADC_Enable+0x80>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a18      	ldr	r2, [pc, #96]	@ (8001294 <ADC_Enable+0x84>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0c9b      	lsrs	r3, r3, #18
 8001238:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800123a:	e002      	b.n	8001242 <ADC_Enable+0x32>
      wait_loop_index--;
 800123c:	9b01      	ldr	r3, [sp, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001242:	9b01      	ldr	r3, [sp, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8001248:	f7ff fe7c 	bl	8000f44 <HAL_GetTick>
 800124c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f013 0f01 	tst.w	r3, #1
 8001256:	d116      	bne.n	8001286 <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001258:	f7ff fe74 	bl	8000f44 <HAL_GetTick>
 800125c:	1b43      	subs	r3, r0, r5
 800125e:	2b02      	cmp	r3, #2
 8001260:	d9f5      	bls.n	800124e <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f013 0f01 	tst.w	r3, #1
 800126a:	d1f0      	bne.n	800124e <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001274:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 800127c:	2300      	movs	r3, #0
 800127e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
 8001284:	e002      	b.n	800128c <ADC_Enable+0x7c>
  return HAL_OK;
 8001286:	2000      	movs	r0, #0
 8001288:	e000      	b.n	800128c <ADC_Enable+0x7c>
 800128a:	2000      	movs	r0, #0
}
 800128c:	b003      	add	sp, #12
 800128e:	bd30      	pop	{r4, r5, pc}
 8001290:	20000024 	.word	0x20000024
 8001294:	431bde83 	.word	0x431bde83

08001298 <HAL_ADC_Start_DMA>:
{
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	4604      	mov	r4, r0
 800129c:	460d      	mov	r5, r1
 800129e:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012a0:	6801      	ldr	r1, [r0, #0]
 80012a2:	4844      	ldr	r0, [pc, #272]	@ (80013b4 <HAL_ADC_Start_DMA+0x11c>)
 80012a4:	4281      	cmp	r1, r0
 80012a6:	d059      	beq.n	800135c <HAL_ADC_Start_DMA+0xc4>
 80012a8:	4b43      	ldr	r3, [pc, #268]	@ (80013b8 <HAL_ADC_Start_DMA+0x120>)
 80012aa:	4299      	cmp	r1, r3
 80012ac:	d056      	beq.n	800135c <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 80012ae:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d07c      	beq.n	80013b0 <HAL_ADC_Start_DMA+0x118>
 80012b6:	2301      	movs	r3, #1
 80012b8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff ffa7 	bl	8001210 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80012c2:	4607      	mov	r7, r0
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d16e      	bne.n	80013a6 <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 80012c8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80012ca:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 80012ce:	f021 0101 	bic.w	r1, r1, #1
 80012d2:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80012d6:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012d8:	6822      	ldr	r2, [r4, #0]
 80012da:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <HAL_ADC_Start_DMA+0x120>)
 80012dc:	429a      	cmp	r2, r3
 80012de:	d044      	beq.n	800136a <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80012e6:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e8:	6853      	ldr	r3, [r2, #4]
 80012ea:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80012ee:	d005      	beq.n	80012fc <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012fa:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012fe:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001302:	d048      	beq.n	8001396 <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001304:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001306:	f023 0306 	bic.w	r3, r3, #6
 800130a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 800130c:	2300      	movs	r3, #0
 800130e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001312:	6a23      	ldr	r3, [r4, #32]
 8001314:	4a29      	ldr	r2, [pc, #164]	@ (80013bc <HAL_ADC_Start_DMA+0x124>)
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001318:	6a23      	ldr	r3, [r4, #32]
 800131a:	4a29      	ldr	r2, [pc, #164]	@ (80013c0 <HAL_ADC_Start_DMA+0x128>)
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800131e:	6a23      	ldr	r3, [r4, #32]
 8001320:	4a28      	ldr	r2, [pc, #160]	@ (80013c4 <HAL_ADC_Start_DMA+0x12c>)
 8001322:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	f06f 0202 	mvn.w	r2, #2
 800132a:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800132c:	6822      	ldr	r2, [r4, #0]
 800132e:	6893      	ldr	r3, [r2, #8]
 8001330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001334:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001336:	6821      	ldr	r1, [r4, #0]
 8001338:	4633      	mov	r3, r6
 800133a:	462a      	mov	r2, r5
 800133c:	314c      	adds	r1, #76	@ 0x4c
 800133e:	6a20      	ldr	r0, [r4, #32]
 8001340:	f000 fa50 	bl	80017e4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800134c:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001350:	d024      	beq.n	800139c <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	e027      	b.n	80013ac <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_ADC_Start_DMA+0x11c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001364:	d0a3      	beq.n	80012ae <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8001366:	2701      	movs	r7, #1
 8001368:	e020      	b.n	80013ac <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800136a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001374:	d0b4      	beq.n	80012e0 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001376:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001378:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800137c:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <HAL_ADC_Start_DMA+0x11c>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001386:	d0b9      	beq.n	80012fc <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001388:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800138a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800138e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001392:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001394:	e7b2      	b.n	80012fc <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 8001396:	2300      	movs	r3, #0
 8001398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800139a:	e7b7      	b.n	800130c <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e002      	b.n	80013ac <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 80013a6:	2300      	movs	r3, #0
 80013a8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80013ac:	4638      	mov	r0, r7
 80013ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80013b0:	2702      	movs	r7, #2
 80013b2:	e7fb      	b.n	80013ac <HAL_ADC_Start_DMA+0x114>
 80013b4:	40012400 	.word	0x40012400
 80013b8:	40012800 	.word	0x40012800
 80013bc:	08000f53 	.word	0x08000f53
 80013c0:	08000fa7 	.word	0x08000fa7
 80013c4:	080010b7 	.word	0x080010b7

080013c8 <ADC_ConversionStop_Disable>:
{
 80013c8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013ca:	6803      	ldr	r3, [r0, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	f012 0f01 	tst.w	r2, #1
 80013d2:	d101      	bne.n	80013d8 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80013d4:	2000      	movs	r0, #0
}
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80013e2:	f7ff fdaf 	bl	8000f44 <HAL_GetTick>
 80013e6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f013 0f01 	tst.w	r3, #1
 80013f0:	d013      	beq.n	800141a <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013f2:	f7ff fda7 	bl	8000f44 <HAL_GetTick>
 80013f6:	1b43      	subs	r3, r0, r5
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d9f5      	bls.n	80013e8 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f013 0f01 	tst.w	r3, #1
 8001404:	d0f0      	beq.n	80013e8 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001406:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8001416:	2001      	movs	r0, #1
 8001418:	e7dd      	b.n	80013d6 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800141a:	2000      	movs	r0, #0
 800141c:	e7db      	b.n	80013d6 <ADC_ConversionStop_Disable+0xe>
	...

08001420 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001420:	2800      	cmp	r0, #0
 8001422:	d07b      	beq.n	800151c <HAL_ADC_Init+0xfc>
{
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001428:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800142a:	2b00      	cmp	r3, #0
 800142c:	d04d      	beq.n	80014ca <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800142e:	4620      	mov	r0, r4
 8001430:	f7ff ffca 	bl	80013c8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001434:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001436:	f013 0310 	ands.w	r3, r3, #16
 800143a:	d169      	bne.n	8001510 <HAL_ADC_Init+0xf0>
 800143c:	2800      	cmp	r0, #0
 800143e:	d167      	bne.n	8001510 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8001440:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001442:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8001446:	f022 0202 	bic.w	r2, r2, #2
 800144a:	f042 0202 	orr.w	r2, r2, #2
 800144e:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001450:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001452:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001454:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001456:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001458:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800145c:	68a5      	ldr	r5, [r4, #8]
 800145e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001462:	d002      	beq.n	800146a <HAL_ADC_Init+0x4a>
 8001464:	2d01      	cmp	r5, #1
 8001466:	d036      	beq.n	80014d6 <HAL_ADC_Init+0xb6>
 8001468:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800146a:	7d26      	ldrb	r6, [r4, #20]
 800146c:	2e01      	cmp	r6, #1
 800146e:	d035      	beq.n	80014dc <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8001470:	6826      	ldr	r6, [r4, #0]
 8001472:	6871      	ldr	r1, [r6, #4]
 8001474:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8001478:	4329      	orrs	r1, r5
 800147a:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800147c:	6825      	ldr	r5, [r4, #0]
 800147e:	68ae      	ldr	r6, [r5, #8]
 8001480:	4927      	ldr	r1, [pc, #156]	@ (8001520 <HAL_ADC_Init+0x100>)
 8001482:	4031      	ands	r1, r6
 8001484:	4311      	orrs	r1, r2
 8001486:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001488:	68a1      	ldr	r1, [r4, #8]
 800148a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800148e:	d001      	beq.n	8001494 <HAL_ADC_Init+0x74>
 8001490:	2901      	cmp	r1, #1
 8001492:	d102      	bne.n	800149a <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001494:	6923      	ldr	r3, [r4, #16]
 8001496:	3b01      	subs	r3, #1
 8001498:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800149a:	6825      	ldr	r5, [r4, #0]
 800149c:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800149e:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 80014a2:	430b      	orrs	r3, r1
 80014a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_ADC_Init+0x104>)
 80014ac:	400b      	ands	r3, r1
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d025      	beq.n	80014fe <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80014b2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80014b4:	f023 0312 	bic.w	r3, r3, #18
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
 80014c8:	e027      	b.n	800151a <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 80014ca:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80014cc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 80014d0:	f000 fbda 	bl	8001c88 <HAL_ADC_MspInit>
 80014d4:	e7ab      	b.n	800142e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014d6:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80014da:	e7c6      	b.n	800146a <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014dc:	b931      	cbnz	r1, 80014ec <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014de:	69a1      	ldr	r1, [r4, #24]
 80014e0:	3901      	subs	r1, #1
 80014e2:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 80014e6:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 80014ea:	e7c1      	b.n	8001470 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80014ee:	f041 0120 	orr.w	r1, r1, #32
 80014f2:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80014f6:	f041 0101 	orr.w	r1, r1, #1
 80014fa:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80014fc:	e7b8      	b.n	8001470 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 80014fe:	2300      	movs	r3, #0
 8001500:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001502:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001504:	f023 0303 	bic.w	r3, r3, #3
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800150e:	e004      	b.n	800151a <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001510:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8001518:	2001      	movs	r0, #1
}
 800151a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800151c:	2001      	movs	r0, #1
}
 800151e:	4770      	bx	lr
 8001520:	ffe1f7fd 	.word	0xffe1f7fd
 8001524:	ff1f0efe 	.word	0xff1f0efe

08001528 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001528:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800152c:	2b01      	cmp	r3, #1
 800152e:	d013      	beq.n	8001558 <HAL_ADC_Stop+0x30>
{
 8001530:	b510      	push	{r4, lr}
 8001532:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001534:	2301      	movs	r3, #1
 8001536:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800153a:	f7ff ff45 	bl	80013c8 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800153e:	b938      	cbnz	r0, 8001550 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8001540:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001542:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	62a3      	str	r3, [r4, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8001550:	2300      	movs	r3, #0
 8001552:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001556:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001558:	2002      	movs	r0, #2
}
 800155a:	4770      	bx	lr

0800155c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001564:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001568:	2b01      	cmp	r3, #1
 800156a:	d072      	beq.n	8001652 <HAL_ADCEx_Calibration_Start+0xf6>
 800156c:	4604      	mov	r4, r0
 800156e:	2301      	movs	r3, #1
 8001570:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001574:	f7ff ff28 	bl	80013c8 <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff fe49 	bl	8001210 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800157e:	4605      	mov	r5, r0
 8001580:	b128      	cbz	r0, 800158e <HAL_ADCEx_Calibration_Start+0x32>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	2300      	movs	r3, #0
 8001584:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001588:	4628      	mov	r0, r5
 800158a:	b002      	add	sp, #8
 800158c:	bd70      	pop	{r4, r5, r6, pc}
     ADC_STATE_CLR_SET(hadc->State,
 800158e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001590:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001594:	f023 0302 	bic.w	r3, r3, #2
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800159e:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <HAL_ADCEx_Calibration_Start+0xfc>)
 80015a0:	681e      	ldr	r6, [r3, #0]
 80015a2:	2002      	movs	r0, #2
 80015a4:	f001 f800 	bl	80025a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80015a8:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80015ac:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 80015ae:	9601      	str	r6, [sp, #4]
    while(wait_loop_index != 0U)
 80015b0:	e002      	b.n	80015b8 <HAL_ADCEx_Calibration_Start+0x5c>
      wait_loop_index--;
 80015b2:	9b01      	ldr	r3, [sp, #4]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80015b8:	9b01      	ldr	r3, [sp, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <HAL_ADCEx_Calibration_Start+0x56>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80015be:	6822      	ldr	r2, [r4, #0]
 80015c0:	6893      	ldr	r3, [r2, #8]
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80015c8:	f7ff fcbc 	bl	8000f44 <HAL_GetTick>
 80015cc:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	f012 0f08 	tst.w	r2, #8
 80015d6:	d014      	beq.n	8001602 <HAL_ADCEx_Calibration_Start+0xa6>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015d8:	f7ff fcb4 	bl	8000f44 <HAL_GetTick>
 80015dc:	1b80      	subs	r0, r0, r6
 80015de:	280a      	cmp	r0, #10
 80015e0:	d9f5      	bls.n	80015ce <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f013 0f08 	tst.w	r3, #8
 80015ea:	d0f0      	beq.n	80015ce <HAL_ADCEx_Calibration_Start+0x72>
          ADC_STATE_CLR_SET(hadc->State,
 80015ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80015ee:	f023 0312 	bic.w	r3, r3, #18
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 80015f8:	2300      	movs	r3, #0
 80015fa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 80015fe:	2501      	movs	r5, #1
 8001600:	e7c2      	b.n	8001588 <HAL_ADCEx_Calibration_Start+0x2c>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	f042 0204 	orr.w	r2, r2, #4
 8001608:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800160a:	f7ff fc9b 	bl	8000f44 <HAL_GetTick>
 800160e:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f013 0f04 	tst.w	r3, #4
 8001618:	d014      	beq.n	8001644 <HAL_ADCEx_Calibration_Start+0xe8>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800161a:	f7ff fc93 	bl	8000f44 <HAL_GetTick>
 800161e:	1b80      	subs	r0, r0, r6
 8001620:	280a      	cmp	r0, #10
 8001622:	d9f5      	bls.n	8001610 <HAL_ADCEx_Calibration_Start+0xb4>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f013 0f04 	tst.w	r3, #4
 800162c:	d0f0      	beq.n	8001610 <HAL_ADCEx_Calibration_Start+0xb4>
          ADC_STATE_CLR_SET(hadc->State,
 800162e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001630:	f023 0312 	bic.w	r3, r3, #18
 8001634:	f043 0310 	orr.w	r3, r3, #16
 8001638:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 800163a:	2300      	movs	r3, #0
 800163c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8001640:	2501      	movs	r5, #1
 8001642:	e7a1      	b.n	8001588 <HAL_ADCEx_Calibration_Start+0x2c>
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001646:	f023 0303 	bic.w	r3, r3, #3
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001650:	e797      	b.n	8001582 <HAL_ADCEx_Calibration_Start+0x26>
  __HAL_LOCK(hadc);
 8001652:	2502      	movs	r5, #2
 8001654:	e798      	b.n	8001588 <HAL_ADCEx_Calibration_Start+0x2c>
 8001656:	bf00      	nop
 8001658:	20000024 	.word	0x20000024

0800165c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800165c:	4770      	bx	lr
	...

08001660 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001660:	2800      	cmp	r0, #0
 8001662:	db08      	blt.n	8001676 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	0109      	lsls	r1, r1, #4
 8001666:	b2c9      	uxtb	r1, r1
 8001668:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800166c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001670:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001674:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	f000 000f 	and.w	r0, r0, #15
 800167a:	0109      	lsls	r1, r1, #4
 800167c:	b2c9      	uxtb	r1, r1
 800167e:	4b01      	ldr	r3, [pc, #4]	@ (8001684 <__NVIC_SetPriority+0x24>)
 8001680:	5419      	strb	r1, [r3, r0]
  }
}
 8001682:	4770      	bx	lr
 8001684:	e000ed14 	.word	0xe000ed14

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168e:	f1c0 0c07 	rsb	ip, r0, #7
 8001692:	f1bc 0f04 	cmp.w	ip, #4
 8001696:	bf28      	it	cs
 8001698:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169c:	1d03      	adds	r3, r0, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d90f      	bls.n	80016c2 <NVIC_EncodePriority+0x3a>
 80016a2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 3eff 	mov.w	lr, #4294967295
 80016a8:	fa0e f00c 	lsl.w	r0, lr, ip
 80016ac:	ea21 0100 	bic.w	r1, r1, r0
 80016b0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b2:	fa0e fe03 	lsl.w	lr, lr, r3
 80016b6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80016ba:	ea41 0002 	orr.w	r0, r1, r2
 80016be:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	2300      	movs	r3, #0
 80016c4:	e7ee      	b.n	80016a4 <NVIC_EncodePriority+0x1c>
	...

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016cc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d4:	0200      	lsls	r0, r0, #8
 80016d6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016da:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80016e4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ec:	b510      	push	{r4, lr}
 80016ee:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_NVIC_SetPriority+0x1c>)
 80016f2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80016f8:	f7ff ffc6 	bl	8001688 <NVIC_EncodePriority>
 80016fc:	4601      	mov	r1, r0
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff ffae 	bl	8001660 <__NVIC_SetPriority>
}
 8001704:	bd10      	pop	{r4, pc}
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800170c:	2800      	cmp	r0, #0
 800170e:	db07      	blt.n	8001720 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001710:	f000 021f 	and.w	r2, r0, #31
 8001714:	0940      	lsrs	r0, r0, #5
 8001716:	2301      	movs	r3, #1
 8001718:	4093      	lsls	r3, r2
 800171a:	4a02      	ldr	r2, [pc, #8]	@ (8001724 <HAL_NVIC_EnableIRQ+0x18>)
 800171c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	3801      	subs	r0, #1
 800172a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800172e:	d20b      	bcs.n	8001748 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001730:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001734:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <HAL_SYSTICK_Config+0x24>)
 8001738:	21f0      	movs	r1, #240	@ 0xf0
 800173a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173e:	2000      	movs	r0, #0
 8001740:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	2207      	movs	r2, #7
 8001744:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001746:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001748:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001750:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001752:	2401      	movs	r4, #1
 8001754:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001756:	40ac      	lsls	r4, r5
 8001758:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800175a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800175c:	6804      	ldr	r4, [r0, #0]
 800175e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001760:	6843      	ldr	r3, [r0, #4]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d005      	beq.n	8001772 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001766:	6803      	ldr	r3, [r0, #0]
 8001768:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800176a:	6803      	ldr	r3, [r0, #0]
 800176c:	60da      	str	r2, [r3, #12]
  }
}
 800176e:	bc30      	pop	{r4, r5}
 8001770:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001772:	6803      	ldr	r3, [r0, #0]
 8001774:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001776:	6803      	ldr	r3, [r0, #0]
 8001778:	60d9      	str	r1, [r3, #12]
 800177a:	e7f8      	b.n	800176e <DMA_SetConfig+0x1e>

0800177c <HAL_DMA_Init>:
  if(hdma == NULL)
 800177c:	b350      	cbz	r0, 80017d4 <HAL_DMA_Init+0x58>
{
 800177e:	b410      	push	{r4}
 8001780:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001782:	6801      	ldr	r1, [r0, #0]
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <HAL_DMA_Init+0x5c>)
 8001786:	440b      	add	r3, r1
 8001788:	4814      	ldr	r0, [pc, #80]	@ (80017dc <HAL_DMA_Init+0x60>)
 800178a:	fba0 0303 	umull	r0, r3, r0, r3
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_DMA_Init+0x64>)
 8001796:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001798:	2302      	movs	r3, #2
 800179a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 800179e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017a0:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 80017a4:	6853      	ldr	r3, [r2, #4]
 80017a6:	6894      	ldr	r4, [r2, #8]
 80017a8:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017aa:	68d4      	ldr	r4, [r2, #12]
 80017ac:	4323      	orrs	r3, r4
 80017ae:	6914      	ldr	r4, [r2, #16]
 80017b0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b2:	6954      	ldr	r4, [r2, #20]
 80017b4:	4323      	orrs	r3, r4
 80017b6:	6994      	ldr	r4, [r2, #24]
 80017b8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ba:	69d4      	ldr	r4, [r2, #28]
 80017bc:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80017be:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80017c0:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c2:	2000      	movs	r0, #0
 80017c4:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 80017cc:	f882 0020 	strb.w	r0, [r2, #32]
}
 80017d0:	bc10      	pop	{r4}
 80017d2:	4770      	bx	lr
    return HAL_ERROR;
 80017d4:	2001      	movs	r0, #1
}
 80017d6:	4770      	bx	lr
 80017d8:	bffdfff8 	.word	0xbffdfff8
 80017dc:	cccccccd 	.word	0xcccccccd
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_DMA_Start_IT>:
{
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80017e8:	f890 0020 	ldrb.w	r0, [r0, #32]
 80017ec:	2801      	cmp	r0, #1
 80017ee:	d031      	beq.n	8001854 <HAL_DMA_Start_IT+0x70>
 80017f0:	2001      	movs	r0, #1
 80017f2:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80017f6:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 80017fa:	2801      	cmp	r0, #1
 80017fc:	d004      	beq.n	8001808 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 80017fe:	2300      	movs	r3, #0
 8001800:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8001804:	2002      	movs	r0, #2
}
 8001806:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001808:	2002      	movs	r0, #2
 800180a:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180e:	2000      	movs	r0, #0
 8001810:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8001812:	6825      	ldr	r5, [r4, #0]
 8001814:	6828      	ldr	r0, [r5, #0]
 8001816:	f020 0001 	bic.w	r0, r0, #1
 800181a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff ff97 	bl	8001750 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001822:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001824:	b15b      	cbz	r3, 800183e <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	6822      	ldr	r2, [r4, #0]
 8001828:	6813      	ldr	r3, [r2, #0]
 800182a:	f043 030e 	orr.w	r3, r3, #14
 800182e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001830:	6822      	ldr	r2, [r4, #0]
 8001832:	6813      	ldr	r3, [r2, #0]
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800183a:	2000      	movs	r0, #0
 800183c:	e7e3      	b.n	8001806 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800183e:	6822      	ldr	r2, [r4, #0]
 8001840:	6813      	ldr	r3, [r2, #0]
 8001842:	f023 0304 	bic.w	r3, r3, #4
 8001846:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001848:	6822      	ldr	r2, [r4, #0]
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	f043 030a 	orr.w	r3, r3, #10
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e7ed      	b.n	8001830 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001854:	2002      	movs	r0, #2
 8001856:	e7d6      	b.n	8001806 <HAL_DMA_Start_IT+0x22>

08001858 <HAL_DMA_IRQHandler>:
{
 8001858:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800185a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800185c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800185e:	6804      	ldr	r4, [r0, #0]
 8001860:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001862:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001864:	2304      	movs	r3, #4
 8001866:	408b      	lsls	r3, r1
 8001868:	4213      	tst	r3, r2
 800186a:	d035      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x80>
 800186c:	f015 0f04 	tst.w	r5, #4
 8001870:	d032      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	f013 0f20 	tst.w	r3, #32
 8001878:	d103      	bne.n	8001882 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	f023 0304 	bic.w	r3, r3, #4
 8001880:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001882:	6803      	ldr	r3, [r0, #0]
 8001884:	4a43      	ldr	r2, [pc, #268]	@ (8001994 <HAL_DMA_IRQHandler+0x13c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d014      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x5c>
 800188a:	3214      	adds	r2, #20
 800188c:	4293      	cmp	r3, r2
 800188e:	d018      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x6a>
 8001890:	3214      	adds	r2, #20
 8001892:	4293      	cmp	r3, r2
 8001894:	d017      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x6e>
 8001896:	3214      	adds	r2, #20
 8001898:	4293      	cmp	r3, r2
 800189a:	d017      	beq.n	80018cc <HAL_DMA_IRQHandler+0x74>
 800189c:	3214      	adds	r2, #20
 800189e:	4293      	cmp	r3, r2
 80018a0:	d017      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x7a>
 80018a2:	3214      	adds	r2, #20
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d002      	beq.n	80018ae <HAL_DMA_IRQHandler+0x56>
 80018a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018ac:	e003      	b.n	80018b6 <HAL_DMA_IRQHandler+0x5e>
 80018ae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018b2:	e000      	b.n	80018b6 <HAL_DMA_IRQHandler+0x5e>
 80018b4:	2204      	movs	r2, #4
 80018b6:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <HAL_DMA_IRQHandler+0x140>)
 80018b8:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80018ba:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80018bc:	b103      	cbz	r3, 80018c0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 80018be:	4798      	blx	r3
}
 80018c0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018c2:	2240      	movs	r2, #64	@ 0x40
 80018c4:	e7f7      	b.n	80018b6 <HAL_DMA_IRQHandler+0x5e>
 80018c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018ca:	e7f4      	b.n	80018b6 <HAL_DMA_IRQHandler+0x5e>
 80018cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018d0:	e7f1      	b.n	80018b6 <HAL_DMA_IRQHandler+0x5e>
 80018d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018d6:	e7ee      	b.n	80018b6 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018d8:	2302      	movs	r3, #2
 80018da:	408b      	lsls	r3, r1
 80018dc:	4213      	tst	r3, r2
 80018de:	d03c      	beq.n	800195a <HAL_DMA_IRQHandler+0x102>
 80018e0:	f015 0f02 	tst.w	r5, #2
 80018e4:	d039      	beq.n	800195a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	f013 0f20 	tst.w	r3, #32
 80018ec:	d106      	bne.n	80018fc <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	f023 030a 	bic.w	r3, r3, #10
 80018f4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018fc:	6803      	ldr	r3, [r0, #0]
 80018fe:	4a25      	ldr	r2, [pc, #148]	@ (8001994 <HAL_DMA_IRQHandler+0x13c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d014      	beq.n	800192e <HAL_DMA_IRQHandler+0xd6>
 8001904:	3214      	adds	r2, #20
 8001906:	4293      	cmp	r3, r2
 8001908:	d01c      	beq.n	8001944 <HAL_DMA_IRQHandler+0xec>
 800190a:	3214      	adds	r2, #20
 800190c:	4293      	cmp	r3, r2
 800190e:	d01b      	beq.n	8001948 <HAL_DMA_IRQHandler+0xf0>
 8001910:	3214      	adds	r2, #20
 8001912:	4293      	cmp	r3, r2
 8001914:	d01b      	beq.n	800194e <HAL_DMA_IRQHandler+0xf6>
 8001916:	3214      	adds	r2, #20
 8001918:	4293      	cmp	r3, r2
 800191a:	d01b      	beq.n	8001954 <HAL_DMA_IRQHandler+0xfc>
 800191c:	3214      	adds	r2, #20
 800191e:	4293      	cmp	r3, r2
 8001920:	d002      	beq.n	8001928 <HAL_DMA_IRQHandler+0xd0>
 8001922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001926:	e003      	b.n	8001930 <HAL_DMA_IRQHandler+0xd8>
 8001928:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800192c:	e000      	b.n	8001930 <HAL_DMA_IRQHandler+0xd8>
 800192e:	2202      	movs	r2, #2
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_DMA_IRQHandler+0x140>)
 8001932:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001934:	2300      	movs	r3, #0
 8001936:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800193a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0bf      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001940:	4798      	blx	r3
 8001942:	e7bd      	b.n	80018c0 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001944:	2220      	movs	r2, #32
 8001946:	e7f3      	b.n	8001930 <HAL_DMA_IRQHandler+0xd8>
 8001948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194c:	e7f0      	b.n	8001930 <HAL_DMA_IRQHandler+0xd8>
 800194e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001952:	e7ed      	b.n	8001930 <HAL_DMA_IRQHandler+0xd8>
 8001954:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001958:	e7ea      	b.n	8001930 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800195a:	2308      	movs	r3, #8
 800195c:	408b      	lsls	r3, r1
 800195e:	4213      	tst	r3, r2
 8001960:	d0ae      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x68>
 8001962:	f015 0f08 	tst.w	r5, #8
 8001966:	d0ab      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	f023 030e 	bic.w	r3, r3, #14
 800196e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001970:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001972:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001974:	2301      	movs	r3, #1
 8001976:	fa03 f202 	lsl.w	r2, r3, r2
 800197a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800197c:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800197e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001982:	2300      	movs	r3, #0
 8001984:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001988:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800198a:	2b00      	cmp	r3, #0
 800198c:	d098      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 800198e:	4798      	blx	r3
  return;
 8001990:	e796      	b.n	80018c0 <HAL_DMA_IRQHandler+0x68>
 8001992:	bf00      	nop
 8001994:	40020008 	.word	0x40020008
 8001998:	40020000 	.word	0x40020000

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019a0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80019a2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a4:	e09e      	b.n	8001ae4 <HAL_GPIO_Init+0x148>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a6:	4d7c      	ldr	r5, [pc, #496]	@ (8001b98 <HAL_GPIO_Init+0x1fc>)
 80019a8:	42ab      	cmp	r3, r5
 80019aa:	d014      	beq.n	80019d6 <HAL_GPIO_Init+0x3a>
 80019ac:	d80c      	bhi.n	80019c8 <HAL_GPIO_Init+0x2c>
 80019ae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80019b2:	42ab      	cmp	r3, r5
 80019b4:	d00f      	beq.n	80019d6 <HAL_GPIO_Init+0x3a>
 80019b6:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 80019ba:	42ab      	cmp	r3, r5
 80019bc:	d00b      	beq.n	80019d6 <HAL_GPIO_Init+0x3a>
 80019be:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80019c2:	42ab      	cmp	r3, r5
 80019c4:	d11f      	bne.n	8001a06 <HAL_GPIO_Init+0x6a>
 80019c6:	e006      	b.n	80019d6 <HAL_GPIO_Init+0x3a>
 80019c8:	4d74      	ldr	r5, [pc, #464]	@ (8001b9c <HAL_GPIO_Init+0x200>)
 80019ca:	42ab      	cmp	r3, r5
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x3a>
 80019ce:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 80019d2:	42ab      	cmp	r3, r5
 80019d4:	d117      	bne.n	8001a06 <HAL_GPIO_Init+0x6a>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019d6:	688b      	ldr	r3, [r1, #8]
 80019d8:	b1a3      	cbz	r3, 8001a04 <HAL_GPIO_Init+0x68>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d00d      	beq.n	80019fa <HAL_GPIO_Init+0x5e>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80019de:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2408      	movs	r4, #8
 80019e2:	e010      	b.n	8001a06 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e4:	68cc      	ldr	r4, [r1, #12]
          break;
 80019e6:	e00e      	b.n	8001a06 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e8:	68cc      	ldr	r4, [r1, #12]
 80019ea:	3404      	adds	r4, #4
          break;
 80019ec:	e00b      	b.n	8001a06 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ee:	68cc      	ldr	r4, [r1, #12]
 80019f0:	3408      	adds	r4, #8
          break;
 80019f2:	e008      	b.n	8001a06 <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f4:	68cc      	ldr	r4, [r1, #12]
 80019f6:	340c      	adds	r4, #12
          break;
 80019f8:	e005      	b.n	8001a06 <HAL_GPIO_Init+0x6a>
            GPIOx->BSRR = ioposition;
 80019fa:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2408      	movs	r4, #8
 80019fe:	e002      	b.n	8001a06 <HAL_GPIO_Init+0x6a>
          }
          break;

        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a00:	2400      	movs	r4, #0
 8001a02:	e000      	b.n	8001a06 <HAL_GPIO_Init+0x6a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a04:	2404      	movs	r4, #4
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a06:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8001a0a:	d837      	bhi.n	8001a7c <HAL_GPIO_Init+0xe0>
 8001a0c:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a0e:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a12:	6833      	ldr	r3, [r6, #0]
 8001a14:	250f      	movs	r5, #15
 8001a16:	4095      	lsls	r5, r2
 8001a18:	ea23 0305 	bic.w	r3, r3, r5
 8001a1c:	fa04 f202 	lsl.w	r2, r4, r2
 8001a20:	4313      	orrs	r3, r2
 8001a22:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a24:	684b      	ldr	r3, [r1, #4]
 8001a26:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001a2a:	d059      	beq.n	8001ae0 <HAL_GPIO_Init+0x144>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ba0 <HAL_GPIO_Init+0x204>)
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	619a      	str	r2, [r3, #24]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001a40:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001a44:	1c95      	adds	r5, r2, #2
 8001a46:	4b57      	ldr	r3, [pc, #348]	@ (8001ba4 <HAL_GPIO_Init+0x208>)
 8001a48:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a4c:	f00c 0503 	and.w	r5, ip, #3
 8001a50:	00ad      	lsls	r5, r5, #2
 8001a52:	230f      	movs	r3, #15
 8001a54:	40ab      	lsls	r3, r5
 8001a56:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a5a:	4b53      	ldr	r3, [pc, #332]	@ (8001ba8 <HAL_GPIO_Init+0x20c>)
 8001a5c:	4298      	cmp	r0, r3
 8001a5e:	d014      	beq.n	8001a8a <HAL_GPIO_Init+0xee>
 8001a60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a64:	4298      	cmp	r0, r3
 8001a66:	d079      	beq.n	8001b5c <HAL_GPIO_Init+0x1c0>
 8001a68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a6c:	4298      	cmp	r0, r3
 8001a6e:	d077      	beq.n	8001b60 <HAL_GPIO_Init+0x1c4>
 8001a70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a74:	4298      	cmp	r0, r3
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0xea>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e007      	b.n	8001a8c <HAL_GPIO_Init+0xf0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a7c:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a7e:	f1ac 0208 	sub.w	r2, ip, #8
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	e7c5      	b.n	8001a12 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a86:	2303      	movs	r3, #3
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0xf0>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	40ab      	lsls	r3, r5
 8001a8e:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001a90:	3202      	adds	r2, #2
 8001a92:	4d44      	ldr	r5, [pc, #272]	@ (8001ba4 <HAL_GPIO_Init+0x208>)
 8001a94:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	684b      	ldr	r3, [r1, #4]
 8001a9a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001a9e:	d061      	beq.n	8001b64 <HAL_GPIO_Init+0x1c8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa0:	4a42      	ldr	r2, [pc, #264]	@ (8001bac <HAL_GPIO_Init+0x210>)
 8001aa2:	6893      	ldr	r3, [r2, #8]
 8001aa4:	ea43 030e 	orr.w	r3, r3, lr
 8001aa8:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aaa:	684b      	ldr	r3, [r1, #4]
 8001aac:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001ab0:	d05e      	beq.n	8001b70 <HAL_GPIO_Init+0x1d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8001bac <HAL_GPIO_Init+0x210>)
 8001ab4:	68d3      	ldr	r3, [r2, #12]
 8001ab6:	ea43 030e 	orr.w	r3, r3, lr
 8001aba:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001abc:	684b      	ldr	r3, [r1, #4]
 8001abe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001ac2:	d05b      	beq.n	8001b7c <HAL_GPIO_Init+0x1e0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac4:	4a39      	ldr	r2, [pc, #228]	@ (8001bac <HAL_GPIO_Init+0x210>)
 8001ac6:	6853      	ldr	r3, [r2, #4]
 8001ac8:	ea43 030e 	orr.w	r3, r3, lr
 8001acc:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ace:	684b      	ldr	r3, [r1, #4]
 8001ad0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001ad4:	d058      	beq.n	8001b88 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad6:	4a35      	ldr	r2, [pc, #212]	@ (8001bac <HAL_GPIO_Init+0x210>)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	ea43 030e 	orr.w	r3, r3, lr
 8001ade:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001ae0:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae4:	680b      	ldr	r3, [r1, #0]
 8001ae6:	fa33 f20c 	lsrs.w	r2, r3, ip
 8001aea:	d053      	beq.n	8001b94 <HAL_GPIO_Init+0x1f8>
    ioposition = (0x01uL << position);
 8001aec:	2201      	movs	r2, #1
 8001aee:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8001af6:	ea32 0303 	bics.w	r3, r2, r3
 8001afa:	d1f1      	bne.n	8001ae0 <HAL_GPIO_Init+0x144>
      switch (GPIO_Init->Mode)
 8001afc:	684b      	ldr	r3, [r1, #4]
 8001afe:	2b12      	cmp	r3, #18
 8001b00:	f63f af51 	bhi.w	80019a6 <HAL_GPIO_Init+0xa>
 8001b04:	2b12      	cmp	r3, #18
 8001b06:	f63f af7e 	bhi.w	8001a06 <HAL_GPIO_Init+0x6a>
 8001b0a:	a501      	add	r5, pc, #4	@ (adr r5, 8001b10 <HAL_GPIO_Init+0x174>)
 8001b0c:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001b10:	080019d7 	.word	0x080019d7
 8001b14:	080019e5 	.word	0x080019e5
 8001b18:	080019ef 	.word	0x080019ef
 8001b1c:	08001a01 	.word	0x08001a01
 8001b20:	08001a07 	.word	0x08001a07
 8001b24:	08001a07 	.word	0x08001a07
 8001b28:	08001a07 	.word	0x08001a07
 8001b2c:	08001a07 	.word	0x08001a07
 8001b30:	08001a07 	.word	0x08001a07
 8001b34:	08001a07 	.word	0x08001a07
 8001b38:	08001a07 	.word	0x08001a07
 8001b3c:	08001a07 	.word	0x08001a07
 8001b40:	08001a07 	.word	0x08001a07
 8001b44:	08001a07 	.word	0x08001a07
 8001b48:	08001a07 	.word	0x08001a07
 8001b4c:	08001a07 	.word	0x08001a07
 8001b50:	08001a07 	.word	0x08001a07
 8001b54:	080019e9 	.word	0x080019e9
 8001b58:	080019f5 	.word	0x080019f5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e795      	b.n	8001a8c <HAL_GPIO_Init+0xf0>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e793      	b.n	8001a8c <HAL_GPIO_Init+0xf0>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b64:	4a11      	ldr	r2, [pc, #68]	@ (8001bac <HAL_GPIO_Init+0x210>)
 8001b66:	6893      	ldr	r3, [r2, #8]
 8001b68:	ea23 030e 	bic.w	r3, r3, lr
 8001b6c:	6093      	str	r3, [r2, #8]
 8001b6e:	e79c      	b.n	8001aaa <HAL_GPIO_Init+0x10e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b70:	4a0e      	ldr	r2, [pc, #56]	@ (8001bac <HAL_GPIO_Init+0x210>)
 8001b72:	68d3      	ldr	r3, [r2, #12]
 8001b74:	ea23 030e 	bic.w	r3, r3, lr
 8001b78:	60d3      	str	r3, [r2, #12]
 8001b7a:	e79f      	b.n	8001abc <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bac <HAL_GPIO_Init+0x210>)
 8001b7e:	6853      	ldr	r3, [r2, #4]
 8001b80:	ea23 030e 	bic.w	r3, r3, lr
 8001b84:	6053      	str	r3, [r2, #4]
 8001b86:	e7a2      	b.n	8001ace <HAL_GPIO_Init+0x132>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b88:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_GPIO_Init+0x210>)
 8001b8a:	6813      	ldr	r3, [r2, #0]
 8001b8c:	ea23 030e 	bic.w	r3, r3, lr
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e7a5      	b.n	8001ae0 <HAL_GPIO_Init+0x144>
  }
}
 8001b94:	b002      	add	sp, #8
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10310000 	.word	0x10310000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010400 	.word	0x40010400

08001bb0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb0:	6883      	ldr	r3, [r0, #8]
 8001bb2:	4219      	tst	r1, r3
 8001bb4:	d001      	beq.n	8001bba <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bba:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbe:	b10a      	cbz	r2, 8001bc4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc0:	6101      	str	r1, [r0, #16]
 8001bc2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc4:	0409      	lsls	r1, r1, #16
 8001bc6:	6101      	str	r1, [r0, #16]
  }
}
 8001bc8:	4770      	bx	lr

08001bca <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bca:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bcc:	ea01 0203 	and.w	r2, r1, r3
 8001bd0:	ea21 0103 	bic.w	r1, r1, r3
 8001bd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001bd8:	6101      	str	r1, [r0, #16]
}
 8001bda:	4770      	bx	lr

08001bdc <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001bdc:	b350      	cbz	r0, 8001c34 <HAL_IWDG_Init+0x58>
{
 8001bde:	b538      	push	{r3, r4, r5, lr}
 8001be0:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001be2:	6803      	ldr	r3, [r0, #0]
 8001be4:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001be8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001bea:	6803      	ldr	r3, [r0, #0]
 8001bec:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001bf0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001bf2:	6803      	ldr	r3, [r0, #0]
 8001bf4:	6842      	ldr	r2, [r0, #4]
 8001bf6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001bf8:	6803      	ldr	r3, [r0, #0]
 8001bfa:	6882      	ldr	r2, [r0, #8]
 8001bfc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001bfe:	f7ff f9a1 	bl	8000f44 <HAL_GetTick>
 8001c02:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	f012 0f03 	tst.w	r2, #3
 8001c0c:	d00d      	beq.n	8001c2a <HAL_IWDG_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001c0e:	f7ff f999 	bl	8000f44 <HAL_GetTick>
 8001c12:	1b40      	subs	r0, r0, r5
 8001c14:	f241 333c 	movw	r3, #4924	@ 0x133c
 8001c18:	4298      	cmp	r0, r3
 8001c1a:	d9f3      	bls.n	8001c04 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f013 0f03 	tst.w	r3, #3
 8001c24:	d0ee      	beq.n	8001c04 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8001c26:	2003      	movs	r0, #3
 8001c28:	e003      	b.n	8001c32 <HAL_IWDG_Init+0x56>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001c2a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001c2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001c30:	2000      	movs	r0, #0
}
 8001c32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
}
 8001c36:	4770      	bx	lr

08001c38 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001c38:	6803      	ldr	r3, [r0, #0]
 8001c3a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001c40:	2000      	movs	r0, #0
 8001c42:	4770      	bx	lr

08001c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_MspInit+0x3c>)
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	619a      	str	r2, [r3, #24]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	f002 0201 	and.w	r2, r2, #1
 8001c56:	9200      	str	r2, [sp, #0]
 8001c58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	69da      	ldr	r2, [r3, #28]
 8001c5c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c60:	61da      	str	r2, [r3, #28]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c6c:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <HAL_MspInit+0x40>)
 8001c6e:	6853      	ldr	r3, [r2, #4]
 8001c70:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	b002      	add	sp, #8
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010000 	.word	0x40010000

08001c88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	9304      	str	r3, [sp, #16]
 8001c94:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001c96:	6802      	ldr	r2, [r0, #0]
 8001c98:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_ADC_MspInit+0x98>)
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_ADC_MspInit+0x1a>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c9e:	b006      	add	sp, #24
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ca4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001cb6:	9200      	str	r2, [sp, #0]
 8001cb8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	f042 0204 	orr.w	r2, r2, #4
 8001cc0:	619a      	str	r2, [r3, #24]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GASE_Pin;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GASE_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	a902      	add	r1, sp, #8
 8001cd6:	4813      	ldr	r0, [pc, #76]	@ (8001d24 <HAL_ADC_MspInit+0x9c>)
 8001cd8:	f7ff fe60 	bl	800199c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001cdc:	4812      	ldr	r0, [pc, #72]	@ (8001d28 <HAL_ADC_MspInit+0xa0>)
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <HAL_ADC_MspInit+0xa4>)
 8001ce0:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce6:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ce8:	2280      	movs	r2, #128	@ 0x80
 8001cea:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf0:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf6:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cf8:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cfa:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cfc:	f7ff fd3e 	bl	800177c <HAL_DMA_Init>
 8001d00:	b958      	cbnz	r0, 8001d1a <HAL_ADC_MspInit+0x92>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_ADC_MspInit+0xa0>)
 8001d04:	6223      	str	r3, [r4, #32]
 8001d06:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	2012      	movs	r0, #18
 8001d0e:	f7ff fced 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d12:	2012      	movs	r0, #18
 8001d14:	f7ff fcfa 	bl	800170c <HAL_NVIC_EnableIRQ>
}
 8001d18:	e7c1      	b.n	8001c9e <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8001d1a:	f7fe fe1b 	bl	8000954 <Error_Handler>
 8001d1e:	e7f0      	b.n	8001d02 <HAL_ADC_MspInit+0x7a>
 8001d20:	40012400 	.word	0x40012400
 8001d24:	40010800 	.word	0x40010800
 8001d28:	200000b8 	.word	0x200000b8
 8001d2c:	40020008 	.word	0x40020008

08001d30 <HAL_RTC_MspInit>:
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001d30:	6802      	ldr	r2, [r0, #0]
 8001d32:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_RTC_MspInit+0x34>)
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d000      	beq.n	8001d3a <HAL_RTC_MspInit+0xa>
 8001d38:	4770      	bx	lr
{
 8001d3a:	b500      	push	{lr}
 8001d3c:	b083      	sub	sp, #12
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001d3e:	f000 f86f 	bl	8001e20 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_RTC_MspInit+0x38>)
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8001d4a:	61da      	str	r2, [r3, #28]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_RTC_MspInit+0x3c>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001d5e:	b003      	add	sp, #12
 8001d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d64:	40002800 	.word	0x40002800
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	42420000 	.word	0x42420000

08001d70 <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001d70:	6802      	ldr	r2, [r0, #0]
 8001d72:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <HAL_TIM_Base_MspInit+0x5c>)
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d000      	beq.n	8001d7a <HAL_TIM_Base_MspInit+0xa>
 8001d78:	4770      	bx	lr
{
 8001d7a:	b500      	push	{lr}
 8001d7c:	b083      	sub	sp, #12
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7e:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d88:	619a      	str	r2, [r3, #24]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	4611      	mov	r1, r2
 8001d98:	2018      	movs	r0, #24
 8001d9a:	f7ff fca7 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001d9e:	2018      	movs	r0, #24
 8001da0:	f7ff fcb4 	bl	800170c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	4611      	mov	r1, r2
 8001da8:	2019      	movs	r0, #25
 8001daa:	f7ff fc9f 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001dae:	2019      	movs	r0, #25
 8001db0:	f7ff fcac 	bl	800170c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	4611      	mov	r1, r2
 8001db8:	201a      	movs	r0, #26
 8001dba:	f7ff fc97 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001dbe:	201a      	movs	r0, #26
 8001dc0:	f7ff fca4 	bl	800170c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001dc4:	b003      	add	sp, #12
 8001dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dca:	bf00      	nop
 8001dcc:	40012c00 	.word	0x40012c00

08001dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd0:	b500      	push	{lr}
 8001dd2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	9303      	str	r3, [sp, #12]
 8001dda:	9304      	str	r3, [sp, #16]
 8001ddc:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001dde:	6802      	ldr	r2, [r0, #0]
 8001de0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <HAL_TIM_MspPostInit+0x48>)
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d002      	beq.n	8001dec <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001de6:	b007      	add	sp, #28
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	f042 0204 	orr.w	r2, r2, #4
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e02:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	a902      	add	r1, sp, #8
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <HAL_TIM_MspPostInit+0x4c>)
 8001e12:	f7ff fdc3 	bl	800199c <HAL_GPIO_Init>
}
 8001e16:	e7e6      	b.n	8001de6 <HAL_TIM_MspPostInit+0x16>
 8001e18:	40012c00 	.word	0x40012c00
 8001e1c:	40010800 	.word	0x40010800

08001e20 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001e20:	4b01      	ldr	r3, [pc, #4]	@ (8001e28 <HAL_PWR_EnableBkUpAccess+0x8>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	621a      	str	r2, [r3, #32]
}
 8001e26:	4770      	bx	lr
 8001e28:	420e0000 	.word	0x420e0000

08001e2c <HAL_PWR_DisableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001e2c:	4b01      	ldr	r3, [pc, #4]	@ (8001e34 <HAL_PWR_DisableBkUpAccess+0x8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	621a      	str	r2, [r3, #32]
}
 8001e32:	4770      	bx	lr
 8001e34:	420e0000 	.word	0x420e0000

08001e38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e38:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <RCC_Delay+0x24>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a08      	ldr	r2, [pc, #32]	@ (8001e60 <RCC_Delay+0x28>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	fb00 f303 	mul.w	r3, r0, r3
 8001e4a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001e4c:	bf00      	nop
  }
  while (Delay --);
 8001e4e:	9b01      	ldr	r3, [sp, #4]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	9201      	str	r2, [sp, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f9      	bne.n	8001e4c <RCC_Delay+0x14>
}
 8001e58:	b002      	add	sp, #8
 8001e5a:	4770      	bx	lr
 8001e5c:	20000024 	.word	0x20000024
 8001e60:	10624dd3 	.word	0x10624dd3

08001e64 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001e64:	2800      	cmp	r0, #0
 8001e66:	f000 81f1 	beq.w	800224c <HAL_RCC_OscConfig+0x3e8>
{
 8001e6a:	b570      	push	{r4, r5, r6, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e70:	6803      	ldr	r3, [r0, #0]
 8001e72:	f013 0f01 	tst.w	r3, #1
 8001e76:	d02c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4b99      	ldr	r3, [pc, #612]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d01d      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	4b96      	ldr	r3, [pc, #600]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d012      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e90:	6863      	ldr	r3, [r4, #4]
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e96:	d041      	beq.n	8001f1c <HAL_RCC_OscConfig+0xb8>
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d155      	bne.n	8001f48 <HAL_RCC_OscConfig+0xe4>
 8001e9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ea0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e037      	b.n	8001f26 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb6:	4b8a      	ldr	r3, [pc, #552]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001ebe:	d0e7      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	4b87      	ldr	r3, [pc, #540]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x6e>
 8001eca:	6863      	ldr	r3, [r4, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 81bf 	beq.w	8002250 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	f013 0f02 	tst.w	r3, #2
 8001ed8:	d075      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eda:	4b81      	ldr	r3, [pc, #516]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f013 0f0c 	tst.w	r3, #12
 8001ee2:	d05f      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee4:	4b7e      	ldr	r3, [pc, #504]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d054      	beq.n	8001f9a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef0:	6923      	ldr	r3, [r4, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 808a 	beq.w	800200c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001ef8:	4b7a      	ldr	r3, [pc, #488]	@ (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001efe:	f7ff f821 	bl	8000f44 <HAL_GetTick>
 8001f02:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f013 0f02 	tst.w	r3, #2
 8001f0c:	d175      	bne.n	8001ffa <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7ff f819 	bl	8000f44 <HAL_GetTick>
 8001f12:	1b40      	subs	r0, r0, r5
 8001f14:	2802      	cmp	r0, #2
 8001f16:	d9f5      	bls.n	8001f04 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001f18:	2003      	movs	r0, #3
 8001f1a:	e19e      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	4a70      	ldr	r2, [pc, #448]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f26:	6863      	ldr	r3, [r4, #4]
 8001f28:	b343      	cbz	r3, 8001f7c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f80b 	bl	8000f44 <HAL_GetTick>
 8001f2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f30:	4b6b      	ldr	r3, [pc, #428]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f38:	d1cb      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3a:	f7ff f803 	bl	8000f44 <HAL_GetTick>
 8001f3e:	1b40      	subs	r0, r0, r5
 8001f40:	2864      	cmp	r0, #100	@ 0x64
 8001f42:	d9f5      	bls.n	8001f30 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001f44:	2003      	movs	r0, #3
 8001f46:	e188      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_OscConfig+0xfe>
 8001f4e:	4b64      	ldr	r3, [pc, #400]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e7e1      	b.n	8001f26 <HAL_RCC_OscConfig+0xc2>
 8001f62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f66:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e7d4      	b.n	8001f26 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ffe2 	bl	8000f44 <HAL_GetTick>
 8001f80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b57      	ldr	r3, [pc, #348]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001f8a:	d0a2      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe ffda 	bl	8000f44 <HAL_GetTick>
 8001f90:	1b40      	subs	r0, r0, r5
 8001f92:	2864      	cmp	r0, #100	@ 0x64
 8001f94:	d9f5      	bls.n	8001f82 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001f96:	2003      	movs	r0, #3
 8001f98:	e15f      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9a:	4b51      	ldr	r3, [pc, #324]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001fa2:	d1a5      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f013 0f02 	tst.w	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x152>
 8001fae:	6923      	ldr	r3, [r4, #16]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	f040 814f 	bne.w	8002254 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4a4a      	ldr	r2, [pc, #296]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	6813      	ldr	r3, [r2, #0]
 8001fba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001fbe:	6961      	ldr	r1, [r4, #20]
 8001fc0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001fc4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	f013 0f08 	tst.w	r3, #8
 8001fcc:	d033      	beq.n	8002036 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fce:	69a3      	ldr	r3, [r4, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05c      	beq.n	800208e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001fd4:	4b43      	ldr	r3, [pc, #268]	@ (80020e4 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001fdc:	f7fe ffb2 	bl	8000f44 <HAL_GetTick>
 8001fe0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	f013 0f02 	tst.w	r3, #2
 8001fea:	d121      	bne.n	8002030 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7fe ffaa 	bl	8000f44 <HAL_GetTick>
 8001ff0:	1b40      	subs	r0, r0, r5
 8001ff2:	2802      	cmp	r0, #2
 8001ff4:	d9f5      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	e12f      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4a39      	ldr	r2, [pc, #228]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8001ffc:	6813      	ldr	r3, [r2, #0]
 8001ffe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002002:	6961      	ldr	r1, [r4, #20]
 8002004:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e7dc      	b.n	8001fc6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800200c:	4b35      	ldr	r3, [pc, #212]	@ (80020e4 <HAL_RCC_OscConfig+0x280>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002012:	f7fe ff97 	bl	8000f44 <HAL_GetTick>
 8002016:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f013 0f02 	tst.w	r3, #2
 8002020:	d0d1      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002022:	f7fe ff8f 	bl	8000f44 <HAL_GetTick>
 8002026:	1b40      	subs	r0, r0, r5
 8002028:	2802      	cmp	r0, #2
 800202a:	d9f5      	bls.n	8002018 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800202c:	2003      	movs	r0, #3
 800202e:	e114      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002030:	2001      	movs	r0, #1
 8002032:	f7ff ff01 	bl	8001e38 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	f013 0f04 	tst.w	r3, #4
 800203c:	f000 8096 	beq.w	800216c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002040:	4b27      	ldr	r3, [pc, #156]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002048:	d134      	bne.n	80020b4 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002052:	61da      	str	r2, [r3, #28]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205a:	9301      	str	r3, [sp, #4]
 800205c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800205e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <HAL_RCC_OscConfig+0x284>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002068:	d026      	beq.n	80020b8 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206a:	68e3      	ldr	r3, [r4, #12]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d03d      	beq.n	80020ec <HAL_RCC_OscConfig+0x288>
 8002070:	2b00      	cmp	r3, #0
 8002072:	d153      	bne.n	800211c <HAL_RCC_OscConfig+0x2b8>
 8002074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002078:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	621a      	str	r2, [r3, #32]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	f022 0204 	bic.w	r2, r2, #4
 800208a:	621a      	str	r2, [r3, #32]
 800208c:	e033      	b.n	80020f6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_RCC_OscConfig+0x280>)
 8002090:	2200      	movs	r2, #0
 8002092:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002096:	f7fe ff55 	bl	8000f44 <HAL_GetTick>
 800209a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <HAL_RCC_OscConfig+0x27c>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	f013 0f02 	tst.w	r3, #2
 80020a4:	d0c7      	beq.n	8002036 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a6:	f7fe ff4d 	bl	8000f44 <HAL_GetTick>
 80020aa:	1b40      	subs	r0, r0, r5
 80020ac:	2802      	cmp	r0, #2
 80020ae:	d9f5      	bls.n	800209c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80020b0:	2003      	movs	r0, #3
 80020b2:	e0d2      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80020b4:	2500      	movs	r5, #0
 80020b6:	e7d3      	b.n	8002060 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b8:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_RCC_OscConfig+0x284>)
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80020c2:	f7fe ff3f 	bl	8000f44 <HAL_GetTick>
 80020c6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <HAL_RCC_OscConfig+0x284>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80020d0:	d1cb      	bne.n	800206a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7fe ff37 	bl	8000f44 <HAL_GetTick>
 80020d6:	1b80      	subs	r0, r0, r6
 80020d8:	2864      	cmp	r0, #100	@ 0x64
 80020da:	d9f5      	bls.n	80020c8 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80020dc:	2003      	movs	r0, #3
 80020de:	e0bc      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	42420000 	.word	0x42420000
 80020e8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ec:	4a5f      	ldr	r2, [pc, #380]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 80020ee:	6a13      	ldr	r3, [r2, #32]
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f6:	68e3      	ldr	r3, [r4, #12]
 80020f8:	b333      	cbz	r3, 8002148 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80020fa:	f7fe ff23 	bl	8000f44 <HAL_GetTick>
 80020fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	4b5a      	ldr	r3, [pc, #360]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f013 0f02 	tst.w	r3, #2
 8002108:	d12f      	bne.n	800216a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe ff1b 	bl	8000f44 <HAL_GetTick>
 800210e:	1b80      	subs	r0, r0, r6
 8002110:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002114:	4298      	cmp	r0, r3
 8002116:	d9f3      	bls.n	8002100 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
 800211a:	e09e      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	2b05      	cmp	r3, #5
 800211e:	d009      	beq.n	8002134 <HAL_RCC_OscConfig+0x2d0>
 8002120:	4b52      	ldr	r3, [pc, #328]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 8002122:	6a1a      	ldr	r2, [r3, #32]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	621a      	str	r2, [r3, #32]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	f022 0204 	bic.w	r2, r2, #4
 8002130:	621a      	str	r2, [r3, #32]
 8002132:	e7e0      	b.n	80020f6 <HAL_RCC_OscConfig+0x292>
 8002134:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 8002136:	6a1a      	ldr	r2, [r3, #32]
 8002138:	f042 0204 	orr.w	r2, r2, #4
 800213c:	621a      	str	r2, [r3, #32]
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	621a      	str	r2, [r3, #32]
 8002146:	e7d6      	b.n	80020f6 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002148:	f7fe fefc 	bl	8000f44 <HAL_GetTick>
 800214c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f013 0f02 	tst.w	r3, #2
 8002156:	d008      	beq.n	800216a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7fe fef4 	bl	8000f44 <HAL_GetTick>
 800215c:	1b80      	subs	r0, r0, r6
 800215e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002162:	4298      	cmp	r0, r3
 8002164:	d9f3      	bls.n	800214e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002166:	2003      	movs	r0, #3
 8002168:	e077      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800216a:	b9e5      	cbnz	r5, 80021a6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216c:	69e3      	ldr	r3, [r4, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d072      	beq.n	8002258 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002172:	4a3e      	ldr	r2, [pc, #248]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 8002174:	6852      	ldr	r2, [r2, #4]
 8002176:	f002 020c 	and.w	r2, r2, #12
 800217a:	2a08      	cmp	r2, #8
 800217c:	d056      	beq.n	800222c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217e:	2b02      	cmp	r3, #2
 8002180:	d017      	beq.n	80021b2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b3b      	ldr	r3, [pc, #236]	@ (8002270 <HAL_RCC_OscConfig+0x40c>)
 8002184:	2200      	movs	r2, #0
 8002186:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002188:	f7fe fedc 	bl	8000f44 <HAL_GetTick>
 800218c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	4b37      	ldr	r3, [pc, #220]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002196:	d047      	beq.n	8002228 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe fed4 	bl	8000f44 <HAL_GetTick>
 800219c:	1b00      	subs	r0, r0, r4
 800219e:	2802      	cmp	r0, #2
 80021a0:	d9f5      	bls.n	800218e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80021a2:	2003      	movs	r0, #3
 80021a4:	e059      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4a31      	ldr	r2, [pc, #196]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 80021a8:	69d3      	ldr	r3, [r2, #28]
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	61d3      	str	r3, [r2, #28]
 80021b0:	e7dc      	b.n	800216c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002270 <HAL_RCC_OscConfig+0x40c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80021b8:	f7fe fec4 	bl	8000f44 <HAL_GetTick>
 80021bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80021c6:	d006      	beq.n	80021d6 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe febc 	bl	8000f44 <HAL_GetTick>
 80021cc:	1b40      	subs	r0, r0, r5
 80021ce:	2802      	cmp	r0, #2
 80021d0:	d9f5      	bls.n	80021be <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
 80021d4:	e041      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d6:	6a23      	ldr	r3, [r4, #32]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021dc:	d01a      	beq.n	8002214 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021de:	4923      	ldr	r1, [pc, #140]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 80021e0:	684b      	ldr	r3, [r1, #4]
 80021e2:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80021e6:	6a22      	ldr	r2, [r4, #32]
 80021e8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80021ea:	4302      	orrs	r2, r0
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002270 <HAL_RCC_OscConfig+0x40c>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80021f6:	f7fe fea5 	bl	8000f44 <HAL_GetTick>
 80021fa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002204:	d10e      	bne.n	8002224 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fe9d 	bl	8000f44 <HAL_GetTick>
 800220a:	1b00      	subs	r0, r0, r4
 800220c:	2802      	cmp	r0, #2
 800220e:	d9f5      	bls.n	80021fc <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002210:	2003      	movs	r0, #3
 8002212:	e022      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002214:	4a15      	ldr	r2, [pc, #84]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 8002216:	6853      	ldr	r3, [r2, #4]
 8002218:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800221c:	68a1      	ldr	r1, [r4, #8]
 800221e:	430b      	orrs	r3, r1
 8002220:	6053      	str	r3, [r2, #4]
 8002222:	e7dc      	b.n	80021de <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002224:	2000      	movs	r0, #0
 8002226:	e018      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
 8002228:	2000      	movs	r0, #0
 800222a:	e016      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222c:	2b01      	cmp	r3, #1
 800222e:	d016      	beq.n	800225e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002230:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <HAL_RCC_OscConfig+0x408>)
 8002232:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002234:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002238:	6a22      	ldr	r2, [r4, #32]
 800223a:	4291      	cmp	r1, r2
 800223c:	d111      	bne.n	8002262 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800223e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002242:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002244:	4293      	cmp	r3, r2
 8002246:	d10e      	bne.n	8002266 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002248:	2000      	movs	r0, #0
 800224a:	e006      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800224c:	2001      	movs	r0, #1
}
 800224e:	4770      	bx	lr
        return HAL_ERROR;
 8002250:	2001      	movs	r0, #1
 8002252:	e002      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002254:	2001      	movs	r0, #1
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002258:	2000      	movs	r0, #0
}
 800225a:	b002      	add	sp, #8
 800225c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e7fb      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002262:	2001      	movs	r0, #1
 8002264:	e7f9      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
 8002266:	2001      	movs	r0, #1
 8002268:	e7f7      	b.n	800225a <HAL_RCC_OscConfig+0x3f6>
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	42420000 	.word	0x42420000

08002274 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002274:	4b01      	ldr	r3, [pc, #4]	@ (800227c <HAL_RCC_EnableCSS+0x8>)
 8002276:	2201      	movs	r2, #1
 8002278:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800227a:	4770      	bx	lr
 800227c:	42420000 	.word	0x42420000

08002280 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x40>)
 8002282:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002284:	f003 020c 	and.w	r2, r3, #12
 8002288:	2a08      	cmp	r2, #8
 800228a:	d001      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 800228c:	480d      	ldr	r0, [pc, #52]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800228e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002290:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002294:	490c      	ldr	r1, [pc, #48]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x48>)
 8002296:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002298:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x40>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80022a6:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x4c>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022aa:	4a06      	ldr	r2, [pc, #24]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x44>)
 80022ac:	fb02 f000 	mul.w	r0, r2, r0
 80022b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80022b4:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x50>)
 80022b8:	fb03 f000 	mul.w	r0, r3, r0
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	080031f8 	.word	0x080031f8
 80022cc:	080031f4 	.word	0x080031f4
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80022d4:	2800      	cmp	r0, #0
 80022d6:	f000 80a0 	beq.w	800241a <HAL_RCC_ClockConfig+0x146>
{
 80022da:	b570      	push	{r4, r5, r6, lr}
 80022dc:	460d      	mov	r5, r1
 80022de:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b52      	ldr	r3, [pc, #328]	@ (800242c <HAL_RCC_ClockConfig+0x158>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d20b      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ec:	4a4f      	ldr	r2, [pc, #316]	@ (800242c <HAL_RCC_ClockConfig+0x158>)
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	f023 0307 	bic.w	r3, r3, #7
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f8:	6813      	ldr	r3, [r2, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	428b      	cmp	r3, r1
 8002300:	f040 808d 	bne.w	800241e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f013 0f02 	tst.w	r3, #2
 800230a:	d017      	beq.n	800233c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	f013 0f04 	tst.w	r3, #4
 8002310:	d004      	beq.n	800231c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002312:	4a47      	ldr	r2, [pc, #284]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 8002314:	6853      	ldr	r3, [r2, #4]
 8002316:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800231a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	f013 0f08 	tst.w	r3, #8
 8002322:	d004      	beq.n	800232e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002324:	4a42      	ldr	r2, [pc, #264]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 8002326:	6853      	ldr	r3, [r2, #4]
 8002328:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800232c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232e:	4a40      	ldr	r2, [pc, #256]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 8002330:	6853      	ldr	r3, [r2, #4]
 8002332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002336:	68a1      	ldr	r1, [r4, #8]
 8002338:	430b      	orrs	r3, r1
 800233a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	f013 0f01 	tst.w	r3, #1
 8002342:	d031      	beq.n	80023a8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d020      	beq.n	800238c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234a:	2b02      	cmp	r3, #2
 800234c:	d025      	beq.n	800239a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4a38      	ldr	r2, [pc, #224]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	f012 0f02 	tst.w	r2, #2
 8002356:	d064      	beq.n	8002422 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002358:	4935      	ldr	r1, [pc, #212]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 800235a:	684a      	ldr	r2, [r1, #4]
 800235c:	f022 0203 	bic.w	r2, r2, #3
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002364:	f7fe fdee 	bl	8000f44 <HAL_GetTick>
 8002368:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	6862      	ldr	r2, [r4, #4]
 8002374:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002378:	d016      	beq.n	80023a8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237a:	f7fe fde3 	bl	8000f44 <HAL_GetTick>
 800237e:	1b80      	subs	r0, r0, r6
 8002380:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002384:	4298      	cmp	r0, r3
 8002386:	d9f0      	bls.n	800236a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002388:	2003      	movs	r0, #3
 800238a:	e045      	b.n	8002418 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238c:	4a28      	ldr	r2, [pc, #160]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002394:	d1e0      	bne.n	8002358 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002396:	2001      	movs	r0, #1
 8002398:	e03e      	b.n	8002418 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239a:	4a25      	ldr	r2, [pc, #148]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80023a2:	d1d9      	bne.n	8002358 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
 80023a6:	e037      	b.n	8002418 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023a8:	4b20      	ldr	r3, [pc, #128]	@ (800242c <HAL_RCC_ClockConfig+0x158>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	42ab      	cmp	r3, r5
 80023b2:	d90a      	bls.n	80023ca <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b4:	4a1d      	ldr	r2, [pc, #116]	@ (800242c <HAL_RCC_ClockConfig+0x158>)
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	f023 0307 	bic.w	r3, r3, #7
 80023bc:	432b      	orrs	r3, r5
 80023be:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	42ab      	cmp	r3, r5
 80023c8:	d12d      	bne.n	8002426 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	f013 0f04 	tst.w	r3, #4
 80023d0:	d006      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d2:	4a17      	ldr	r2, [pc, #92]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 80023d4:	6853      	ldr	r3, [r2, #4]
 80023d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023da:	68e1      	ldr	r1, [r4, #12]
 80023dc:	430b      	orrs	r3, r1
 80023de:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	f013 0f08 	tst.w	r3, #8
 80023e6:	d007      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023e8:	4a11      	ldr	r2, [pc, #68]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 80023ea:	6853      	ldr	r3, [r2, #4]
 80023ec:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80023f0:	6921      	ldr	r1, [r4, #16]
 80023f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023f6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f8:	f7ff ff42 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <HAL_RCC_ClockConfig+0x15c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002404:	4a0b      	ldr	r2, [pc, #44]	@ (8002434 <HAL_RCC_ClockConfig+0x160>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	40d8      	lsrs	r0, r3
 800240a:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <HAL_RCC_ClockConfig+0x164>)
 800240c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800240e:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_RCC_ClockConfig+0x168>)
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	f7fe fd53 	bl	8000ebc <HAL_InitTick>
  return HAL_OK;
 8002416:	2000      	movs	r0, #0
}
 8002418:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800241a:	2001      	movs	r0, #1
}
 800241c:	4770      	bx	lr
    return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e7fa      	b.n	8002418 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002422:	2001      	movs	r0, #1
 8002424:	e7f8      	b.n	8002418 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002426:	2001      	movs	r0, #1
 8002428:	e7f6      	b.n	8002418 <HAL_RCC_ClockConfig+0x144>
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	08003224 	.word	0x08003224
 8002438:	20000024 	.word	0x20000024
 800243c:	20000020 	.word	0x20000020

08002440 <HAL_RCC_GetHCLKFreq>:
}
 8002440:	4b01      	ldr	r3, [pc, #4]	@ (8002448 <HAL_RCC_GetHCLKFreq+0x8>)
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000024 	.word	0x20000024

0800244c <HAL_RCC_GetPCLK2Freq>:
{
 800244c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800244e:	f7ff fff7 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002452:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800245a:	4a03      	ldr	r2, [pc, #12]	@ (8002468 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
}
 800245e:	40d8      	lsrs	r0, r3
 8002460:	bd08      	pop	{r3, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	0800321c 	.word	0x0800321c

0800246c <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800246c:	4770      	bx	lr
	...

08002470 <HAL_RCC_NMI_IRQHandler>:
{
 8002470:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800247a:	d100      	bne.n	800247e <HAL_RCC_NMI_IRQHandler+0xe>
}
 800247c:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 800247e:	f7ff fff5 	bl	800246c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002482:	4b02      	ldr	r3, [pc, #8]	@ (800248c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002484:	2280      	movs	r2, #128	@ 0x80
 8002486:	729a      	strb	r2, [r3, #10]
}
 8002488:	e7f8      	b.n	800247c <HAL_RCC_NMI_IRQHandler+0xc>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002490:	b570      	push	{r4, r5, r6, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002496:	6803      	ldr	r3, [r0, #0]
 8002498:	f013 0f01 	tst.w	r3, #1
 800249c:	d036      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249e:	4b3f      	ldr	r3, [pc, #252]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80024a6:	d14a      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80024b0:	61da      	str	r2, [r3, #28]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024bc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80024c6:	d03c      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024c8:	4b34      	ldr	r3, [pc, #208]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024cc:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80024d0:	d013      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80024d2:	6862      	ldr	r2, [r4, #4]
 80024d4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80024d8:	429a      	cmp	r2, r3
 80024da:	d00e      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024dc:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80024de:	6a13      	ldr	r3, [r2, #32]
 80024e0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024e4:	492f      	ldr	r1, [pc, #188]	@ (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80024e6:	2601      	movs	r6, #1
 80024e8:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ec:	2600      	movs	r6, #0
 80024ee:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024f2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024f4:	f013 0f01 	tst.w	r3, #1
 80024f8:	d137      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024fa:	4a28      	ldr	r2, [pc, #160]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80024fc:	6a13      	ldr	r3, [r2, #32]
 80024fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002502:	6861      	ldr	r1, [r4, #4]
 8002504:	430b      	orrs	r3, r1
 8002506:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002508:	2d00      	cmp	r5, #0
 800250a:	d13f      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	f013 0f02 	tst.w	r3, #2
 8002512:	d006      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002514:	4a21      	ldr	r2, [pc, #132]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002516:	6853      	ldr	r3, [r2, #4]
 8002518:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800251c:	68a1      	ldr	r1, [r4, #8]
 800251e:	430b      	orrs	r3, r1
 8002520:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	f013 0f10 	tst.w	r3, #16
 8002528:	d035      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800252a:	4a1c      	ldr	r2, [pc, #112]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800252c:	6853      	ldr	r3, [r2, #4]
 800252e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002532:	68e1      	ldr	r1, [r4, #12]
 8002534:	430b      	orrs	r3, r1
 8002536:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002538:	2000      	movs	r0, #0
}
 800253a:	b002      	add	sp, #8
 800253c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus pwrclkchanged = RESET;
 800253e:	2500      	movs	r5, #0
 8002540:	e7bd      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002544:	6813      	ldr	r3, [r2, #0]
 8002546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800254c:	f7fe fcfa 	bl	8000f44 <HAL_GetTick>
 8002550:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800255a:	d1b5      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255c:	f7fe fcf2 	bl	8000f44 <HAL_GetTick>
 8002560:	1b80      	subs	r0, r0, r6
 8002562:	2864      	cmp	r0, #100	@ 0x64
 8002564:	d9f5      	bls.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 8002566:	2003      	movs	r0, #3
 8002568:	e7e7      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 800256a:	f7fe fceb 	bl	8000f44 <HAL_GetTick>
 800256e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f013 0f02 	tst.w	r3, #2
 8002578:	d1bf      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fce3 	bl	8000f44 <HAL_GetTick>
 800257e:	1b80      	subs	r0, r0, r6
 8002580:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002584:	4298      	cmp	r0, r3
 8002586:	d9f3      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xe0>
            return HAL_TIMEOUT;
 8002588:	2003      	movs	r0, #3
 800258a:	e7d6      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800258c:	69d3      	ldr	r3, [r2, #28]
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002592:	61d3      	str	r3, [r2, #28]
 8002594:	e7ba      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8002596:	2000      	movs	r0, #0
 8002598:	e7cf      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	40007000 	.word	0x40007000
 80025a4:	42420000 	.word	0x42420000

080025a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025a8:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025aa:	2802      	cmp	r0, #2
 80025ac:	d04e      	beq.n	800264c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80025ae:	2810      	cmp	r0, #16
 80025b0:	d003      	beq.n	80025ba <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80025b2:	2801      	cmp	r0, #1
 80025b4:	d028      	beq.n	8002608 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80025b6:	2000      	movs	r0, #0
 80025b8:	e052      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80025ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80025bc:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 80025c4:	d04c      	beq.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c6:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80025ca:	4928      	ldr	r1, [pc, #160]	@ (800266c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80025cc:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ce:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80025d2:	d015      	beq.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d4:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80025dc:	4a24      	ldr	r2, [pc, #144]	@ (8002670 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80025de:	5cd2      	ldrb	r2, [r2, r3]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80025e0:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 80025e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80025e6:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80025ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80025f2:	d135      	bne.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 80025f4:	0040      	lsls	r0, r0, #1
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 80025f8:	fba3 3000 	umull	r3, r0, r3, r0
 80025fc:	0840      	lsrs	r0, r0, #1
 80025fe:	e02f      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002600:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8002602:	fb03 f000 	mul.w	r0, r3, r0
 8002606:	e7f0      	b.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800260a:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800260c:	f240 3202 	movw	r2, #770	@ 0x302
 8002610:	401a      	ands	r2, r3
 8002612:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8002616:	d024      	beq.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800261c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002620:	d004      	beq.n	800262c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002626:	d009      	beq.n	800263c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002628:	2000      	movs	r0, #0
 800262a:	e019      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800262c:	4a0e      	ldr	r2, [pc, #56]	@ (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800262e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002630:	f012 0f02 	tst.w	r2, #2
 8002634:	d0f5      	beq.n	8002622 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8002636:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800263a:	e011      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800263c:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8002644:	d00c      	beq.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      {
        frequency = HSE_VALUE / 128U;
 8002646:	f24f 4024 	movw	r0, #62500	@ 0xf424
    default:
    {
      break;
    }
  }
  return (frequency);
 800264a:	e009      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800264c:	f7ff fefe 	bl	800244c <HAL_RCC_GetPCLK2Freq>
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002658:	3301      	adds	r3, #1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002660:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 8002662:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002666:	e7fb      	b.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8002668:	40021000 	.word	0x40021000
 800266c:	0800320c 	.word	0x0800320c
 8002670:	08003208 	.word	0x08003208
 8002674:	007a1200 	.word	0x007a1200
 8002678:	aaaaaaab 	.word	0xaaaaaaab
 800267c:	003d0900 	.word	0x003d0900

08002680 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002680:	b538      	push	{r3, r4, r5, lr}
 8002682:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8002684:	f7fe fc5e 	bl	8000f44 <HAL_GetTick>
 8002688:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	f012 0f20 	tst.w	r2, #32
 8002692:	d107      	bne.n	80026a4 <RTC_EnterInitMode+0x24>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002694:	f7fe fc56 	bl	8000f44 <HAL_GetTick>
 8002698:	1b40      	subs	r0, r0, r5
 800269a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800269e:	d9f4      	bls.n	800268a <RTC_EnterInitMode+0xa>
    {
      return HAL_TIMEOUT;
 80026a0:	2003      	movs	r0, #3
 80026a2:	e004      	b.n	80026ae <RTC_EnterInitMode+0x2e>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	f042 0210 	orr.w	r2, r2, #16
 80026aa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80026ac:	2000      	movs	r0, #0
}
 80026ae:	bd38      	pop	{r3, r4, r5, pc}

080026b0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b4:	6802      	ldr	r2, [r0, #0]
 80026b6:	6853      	ldr	r3, [r2, #4]
 80026b8:	f023 0310 	bic.w	r3, r3, #16
 80026bc:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80026be:	f7fe fc41 	bl	8000f44 <HAL_GetTick>
 80026c2:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f013 0f20 	tst.w	r3, #32
 80026cc:	d107      	bne.n	80026de <RTC_ExitInitMode+0x2e>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80026ce:	f7fe fc39 	bl	8000f44 <HAL_GetTick>
 80026d2:	1b40      	subs	r0, r0, r5
 80026d4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80026d8:	d9f4      	bls.n	80026c4 <RTC_ExitInitMode+0x14>
    {
      return HAL_TIMEOUT;
 80026da:	2003      	movs	r0, #3
 80026dc:	e000      	b.n	80026e0 <RTC_ExitInitMode+0x30>
    }
  }

  return HAL_OK;
 80026de:	2000      	movs	r0, #0
}
 80026e0:	bd38      	pop	{r3, r4, r5, pc}

080026e2 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 80026e2:	b1c0      	cbz	r0, 8002716 <HAL_RTC_WaitForSynchro+0x34>
{
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80026e8:	6802      	ldr	r2, [r0, #0]
 80026ea:	6853      	ldr	r3, [r2, #4]
 80026ec:	f023 0308 	bic.w	r3, r3, #8
 80026f0:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80026f2:	f7fe fc27 	bl	8000f44 <HAL_GetTick>
 80026f6:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80026f8:	682b      	ldr	r3, [r5, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f013 0f08 	tst.w	r3, #8
 8002700:	d107      	bne.n	8002712 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002702:	f7fe fc1f 	bl	8000f44 <HAL_GetTick>
 8002706:	1b00      	subs	r0, r0, r4
 8002708:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800270c:	d9f4      	bls.n	80026f8 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800270e:	2003      	movs	r0, #3
 8002710:	e000      	b.n	8002714 <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8002712:	2000      	movs	r0, #0
}
 8002714:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002716:	2001      	movs	r0, #1
}
 8002718:	4770      	bx	lr
	...

0800271c <HAL_RTC_Init>:
  if (hrtc == NULL)
 800271c:	2800      	cmp	r0, #0
 800271e:	d050      	beq.n	80027c2 <HAL_RTC_Init+0xa6>
{
 8002720:	b510      	push	{r4, lr}
 8002722:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002724:	7c43      	ldrb	r3, [r0, #17]
 8002726:	b14b      	cbz	r3, 800273c <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002728:	2302      	movs	r3, #2
 800272a:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff ffd8 	bl	80026e2 <HAL_RTC_WaitForSynchro>
 8002732:	b138      	cbz	r0, 8002744 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002734:	2304      	movs	r3, #4
 8002736:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002738:	2001      	movs	r0, #1
}
 800273a:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800273c:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800273e:	f7ff faf7 	bl	8001d30 <HAL_RTC_MspInit>
 8002742:	e7f1      	b.n	8002728 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002744:	4620      	mov	r0, r4
 8002746:	f7ff ff9b 	bl	8002680 <RTC_EnterInitMode>
 800274a:	bb28      	cbnz	r0, 8002798 <HAL_RTC_Init+0x7c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800274c:	6822      	ldr	r2, [r4, #0]
 800274e:	6853      	ldr	r3, [r2, #4]
 8002750:	f023 0307 	bic.w	r3, r3, #7
 8002754:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002756:	68a3      	ldr	r3, [r4, #8]
 8002758:	b123      	cbz	r3, 8002764 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800275a:	4a1b      	ldr	r2, [pc, #108]	@ (80027c8 <HAL_RTC_Init+0xac>)
 800275c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002764:	4a18      	ldr	r2, [pc, #96]	@ (80027c8 <HAL_RTC_Init+0xac>)
 8002766:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002768:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 800276c:	68a1      	ldr	r1, [r4, #8]
 800276e:	430b      	orrs	r3, r1
 8002770:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002772:	6863      	ldr	r3, [r4, #4]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d012      	beq.n	80027a0 <HAL_RTC_Init+0x84>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	f3c3 4103 	ubfx	r1, r3, #16, #4
 8002780:	6091      	str	r1, [r2, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff ff91 	bl	80026b0 <RTC_ExitInitMode>
 800278e:	b188      	cbz	r0, 80027b4 <HAL_RTC_Init+0x98>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002790:	2304      	movs	r3, #4
 8002792:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8002794:	2001      	movs	r0, #1
 8002796:	e7d0      	b.n	800273a <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002798:	2304      	movs	r3, #4
 800279a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800279c:	2001      	movs	r0, #1
 800279e:	e7cc      	b.n	800273a <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7ff ff01 	bl	80025a8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80027a6:	b108      	cbz	r0, 80027ac <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1U;
 80027a8:	1e43      	subs	r3, r0, #1
 80027aa:	e7e6      	b.n	800277a <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027ac:	2304      	movs	r3, #4
 80027ae:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
 80027b2:	e7c2      	b.n	800273a <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80027b8:	2301      	movs	r3, #1
 80027ba:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80027bc:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80027be:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80027c0:	e7bb      	b.n	800273a <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 80027c2:	2001      	movs	r0, #1
}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40006c00 	.word	0x40006c00

080027cc <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 80027cc:	0089      	lsls	r1, r1, #2
 80027ce:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80027d2:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80027d6:	b292      	uxth	r2, r2
 80027d8:	600a      	str	r2, [r1, #0]
}
 80027da:	4770      	bx	lr

080027dc <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 80027dc:	0089      	lsls	r1, r1, #2
 80027de:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80027e2:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80027e6:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80027e8:	b280      	uxth	r0, r0
 80027ea:	4770      	bx	lr

080027ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ee:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f0:	6a03      	ldr	r3, [r0, #32]
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027fa:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027fc:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002800:	680c      	ldr	r4, [r1, #0]
 8002802:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002804:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002808:	688b      	ldr	r3, [r1, #8]
 800280a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800280c:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <TIM_OC1_SetConfig+0x50>)
 800280e:	4290      	cmp	r0, r2
 8002810:	d006      	beq.n	8002820 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002812:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002814:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002816:	684a      	ldr	r2, [r1, #4]
 8002818:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281a:	6203      	str	r3, [r0, #32]
}
 800281c:	bc30      	pop	{r4, r5}
 800281e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002820:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002824:	68ca      	ldr	r2, [r1, #12]
 8002826:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8002828:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800282c:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002830:	694a      	ldr	r2, [r1, #20]
 8002832:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002834:	698d      	ldr	r5, [r1, #24]
 8002836:	4315      	orrs	r5, r2
 8002838:	e7eb      	b.n	8002812 <TIM_OC1_SetConfig+0x26>
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00

08002840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002840:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002842:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002844:	6a02      	ldr	r2, [r0, #32]
 8002846:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800284a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800284c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800284e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002850:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002854:	680d      	ldr	r5, [r1, #0]
 8002856:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800285c:	688a      	ldr	r2, [r1, #8]
 800285e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002862:	4a0d      	ldr	r2, [pc, #52]	@ (8002898 <TIM_OC3_SetConfig+0x58>)
 8002864:	4290      	cmp	r0, r2
 8002866:	d006      	beq.n	8002876 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002868:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800286a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800286c:	684a      	ldr	r2, [r1, #4]
 800286e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002870:	6203      	str	r3, [r0, #32]
}
 8002872:	bc30      	pop	{r4, r5}
 8002874:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002876:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800287a:	68ca      	ldr	r2, [r1, #12]
 800287c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002880:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002884:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002888:	694a      	ldr	r2, [r1, #20]
 800288a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800288e:	698a      	ldr	r2, [r1, #24]
 8002890:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002894:	e7e8      	b.n	8002868 <TIM_OC3_SetConfig+0x28>
 8002896:	bf00      	nop
 8002898:	40012c00 	.word	0x40012c00

0800289c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800289e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028a0:	6a02      	ldr	r2, [r0, #32]
 80028a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028a6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028ac:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b0:	680d      	ldr	r5, [r1, #0]
 80028b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028ba:	688d      	ldr	r5, [r1, #8]
 80028bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c0:	4d07      	ldr	r5, [pc, #28]	@ (80028e0 <TIM_OC4_SetConfig+0x44>)
 80028c2:	42a8      	cmp	r0, r5
 80028c4:	d006      	beq.n	80028d4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028ca:	684a      	ldr	r2, [r1, #4]
 80028cc:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ce:	6203      	str	r3, [r0, #32]
}
 80028d0:	bc30      	pop	{r4, r5}
 80028d2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028d4:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028d8:	694d      	ldr	r5, [r1, #20]
 80028da:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80028de:	e7f2      	b.n	80028c6 <TIM_OC4_SetConfig+0x2a>
 80028e0:	40012c00 	.word	0x40012c00

080028e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e8:	6a04      	ldr	r4, [r0, #32]
 80028ea:	f024 0401 	bic.w	r4, r4, #1
 80028ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028fa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80028fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002900:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002902:	6203      	str	r3, [r0, #32]
}
 8002904:	bc10      	pop	{r4}
 8002906:	4770      	bx	lr

08002908 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002908:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800290a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800290c:	6a04      	ldr	r4, [r0, #32]
 800290e:	f024 0410 	bic.w	r4, r4, #16
 8002912:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002914:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002916:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800291a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800291e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002922:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002926:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002928:	6203      	str	r3, [r0, #32]
}
 800292a:	bc10      	pop	{r4}
 800292c:	4770      	bx	lr

0800292e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800292e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002934:	430b      	orrs	r3, r1
 8002936:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800293a:	6083      	str	r3, [r0, #8]
}
 800293c:	4770      	bx	lr
	...

08002940 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002940:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002944:	2b01      	cmp	r3, #1
 8002946:	d127      	bne.n	8002998 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	2302      	movs	r3, #2
 800294a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800294e:	6802      	ldr	r2, [r0, #0]
 8002950:	68d3      	ldr	r3, [r2, #12]
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002958:	6803      	ldr	r3, [r0, #0]
 800295a:	4a11      	ldr	r2, [pc, #68]	@ (80029a0 <HAL_TIM_Base_Start_IT+0x60>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d010      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x42>
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002964:	d00d      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x42>
 8002966:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800296a:	4293      	cmp	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x42>
 800296e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002972:	4293      	cmp	r3, r2
 8002974:	d005      	beq.n	8002982 <HAL_TIM_Base_Start_IT+0x42>
    __HAL_TIM_ENABLE(htim);
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800297e:	2000      	movs	r0, #0
 8002980:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	2a06      	cmp	r2, #6
 800298a:	d007      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002994:	2000      	movs	r0, #0
 8002996:	4770      	bx	lr
    return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
 800299a:	4770      	bx	lr
  return HAL_OK;
 800299c:	2000      	movs	r0, #0
}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00

080029a4 <HAL_TIM_PWM_MspInit>:
}
 80029a4:	4770      	bx	lr

080029a6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIM_IC_CaptureCallback>:
}
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_TriggerCallback>:
}
 80029ac:	4770      	bx	lr

080029ae <HAL_TIM_IRQHandler>:
{
 80029ae:	b570      	push	{r4, r5, r6, lr}
 80029b0:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80029b2:	6803      	ldr	r3, [r0, #0]
 80029b4:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029b6:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029b8:	f015 0f02 	tst.w	r5, #2
 80029bc:	d010      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029be:	f016 0f02 	tst.w	r6, #2
 80029c2:	d00d      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029c4:	f06f 0202 	mvn.w	r2, #2
 80029c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ca:	2301      	movs	r3, #1
 80029cc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ce:	6803      	ldr	r3, [r0, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f013 0f03 	tst.w	r3, #3
 80029d6:	d05e      	beq.n	8002a96 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80029d8:	f7ff ffe6 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029dc:	2300      	movs	r3, #0
 80029de:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029e0:	f015 0f04 	tst.w	r5, #4
 80029e4:	d012      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029e6:	f016 0f04 	tst.w	r6, #4
 80029ea:	d00f      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	f06f 0204 	mvn.w	r2, #4
 80029f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029f4:	2302      	movs	r3, #2
 80029f6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f8:	6823      	ldr	r3, [r4, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002a00:	d04f      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7ff ffd0 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a0c:	f015 0f08 	tst.w	r5, #8
 8002a10:	d012      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a12:	f016 0f08 	tst.w	r6, #8
 8002a16:	d00f      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	f06f 0208 	mvn.w	r2, #8
 8002a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a20:	2304      	movs	r3, #4
 8002a22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f013 0f03 	tst.w	r3, #3
 8002a2c:	d040      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f7ff ffba 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a34:	2300      	movs	r3, #0
 8002a36:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a38:	f015 0f10 	tst.w	r5, #16
 8002a3c:	d012      	beq.n	8002a64 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3e:	f016 0f10 	tst.w	r6, #16
 8002a42:	d00f      	beq.n	8002a64 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	f06f 0210 	mvn.w	r2, #16
 8002a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002a58:	d031      	beq.n	8002abe <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f7ff ffa4 	bl	80029a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a60:	2300      	movs	r3, #0
 8002a62:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a64:	f015 0f01 	tst.w	r5, #1
 8002a68:	d002      	beq.n	8002a70 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a6a:	f016 0f01 	tst.w	r6, #1
 8002a6e:	d12d      	bne.n	8002acc <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a70:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002a74:	d002      	beq.n	8002a7c <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a76:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002a7a:	d12f      	bne.n	8002adc <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a7c:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002a80:	d002      	beq.n	8002a88 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a82:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002a86:	d131      	bne.n	8002aec <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a88:	f015 0f20 	tst.w	r5, #32
 8002a8c:	d002      	beq.n	8002a94 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a8e:	f016 0f20 	tst.w	r6, #32
 8002a92:	d133      	bne.n	8002afc <HAL_TIM_IRQHandler+0x14e>
}
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	f7ff ff86 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f7ff ff85 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
 8002aa0:	e79c      	b.n	80029dc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ff7f 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff ff7e 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
 8002aae:	e7ab      	b.n	8002a08 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f7ff ff78 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7ff ff77 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
 8002abc:	e7ba      	b.n	8002a34 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f7ff ff71 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f7ff ff70 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
 8002aca:	e7c9      	b.n	8002a60 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	f06f 0201 	mvn.w	r2, #1
 8002ad2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7fd fe81 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
 8002ada:	e7c9      	b.n	8002a70 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ae2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f000 faed 	bl	80030c4 <HAL_TIMEx_BreakCallback>
 8002aea:	e7c7      	b.n	8002a7c <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002af2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff ff59 	bl	80029ac <HAL_TIM_TriggerCallback>
 8002afa:	e7c5      	b.n	8002a88 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	f06f 0220 	mvn.w	r2, #32
 8002b02:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002b04:	4620      	mov	r0, r4
 8002b06:	f000 fadc 	bl	80030c2 <HAL_TIMEx_CommutCallback>
}
 8002b0a:	e7c3      	b.n	8002a94 <HAL_TIM_IRQHandler+0xe6>

08002b0c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002b0c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b8c <TIM_Base_SetConfig+0x80>)
 8002b10:	4290      	cmp	r0, r2
 8002b12:	d00a      	beq.n	8002b2a <TIM_Base_SetConfig+0x1e>
 8002b14:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002b18:	d007      	beq.n	8002b2a <TIM_Base_SetConfig+0x1e>
 8002b1a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002b1e:	4290      	cmp	r0, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_Base_SetConfig+0x1e>
 8002b22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b26:	4290      	cmp	r0, r2
 8002b28:	d103      	bne.n	8002b32 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b2e:	684a      	ldr	r2, [r1, #4]
 8002b30:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b32:	4a16      	ldr	r2, [pc, #88]	@ (8002b8c <TIM_Base_SetConfig+0x80>)
 8002b34:	4290      	cmp	r0, r2
 8002b36:	d00a      	beq.n	8002b4e <TIM_Base_SetConfig+0x42>
 8002b38:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x42>
 8002b3e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002b42:	4290      	cmp	r0, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x42>
 8002b46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b4a:	4290      	cmp	r0, r2
 8002b4c:	d103      	bne.n	8002b56 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	68ca      	ldr	r2, [r1, #12]
 8002b54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b5a:	694a      	ldr	r2, [r1, #20]
 8002b5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002b5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b60:	688b      	ldr	r3, [r1, #8]
 8002b62:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b64:	680b      	ldr	r3, [r1, #0]
 8002b66:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <TIM_Base_SetConfig+0x80>)
 8002b6a:	4298      	cmp	r0, r3
 8002b6c:	d00a      	beq.n	8002b84 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b72:	6903      	ldr	r3, [r0, #16]
 8002b74:	f013 0f01 	tst.w	r3, #1
 8002b78:	d003      	beq.n	8002b82 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b7a:	6903      	ldr	r3, [r0, #16]
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6103      	str	r3, [r0, #16]
}
 8002b82:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002b84:	690b      	ldr	r3, [r1, #16]
 8002b86:	6303      	str	r3, [r0, #48]	@ 0x30
 8002b88:	e7f1      	b.n	8002b6e <TIM_Base_SetConfig+0x62>
 8002b8a:	bf00      	nop
 8002b8c:	40012c00 	.word	0x40012c00

08002b90 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002b90:	b340      	cbz	r0, 8002be4 <HAL_TIM_Base_Init+0x54>
{
 8002b92:	b510      	push	{r4, lr}
 8002b94:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b96:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b9a:	b1f3      	cbz	r3, 8002bda <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	f851 0b04 	ldr.w	r0, [r1], #4
 8002ba8:	f7ff ffb0 	bl	8002b0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002bb6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002bba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002bbe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002bce:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002bd2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002bd6:	2000      	movs	r0, #0
}
 8002bd8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002bda:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002bde:	f7ff f8c7 	bl	8001d70 <HAL_TIM_Base_MspInit>
 8002be2:	e7db      	b.n	8002b9c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002be4:	2001      	movs	r0, #1
}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002be8:	b340      	cbz	r0, 8002c3c <HAL_TIM_PWM_Init+0x54>
{
 8002bea:	b510      	push	{r4, lr}
 8002bec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002bee:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002bf2:	b1f3      	cbz	r3, 8002c32 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	f851 0b04 	ldr.w	r0, [r1], #4
 8002c00:	f7ff ff84 	bl	8002b0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002c0e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002c12:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002c16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c22:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002c26:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002c2e:	2000      	movs	r0, #0
}
 8002c30:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c32:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002c36:	f7ff feb5 	bl	80029a4 <HAL_TIM_PWM_MspInit>
 8002c3a:	e7db      	b.n	8002bf4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002c3c:	2001      	movs	r0, #1
}
 8002c3e:	4770      	bx	lr

08002c40 <TIM_OC2_SetConfig>:
{
 8002c40:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002c42:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c44:	6a02      	ldr	r2, [r0, #32]
 8002c46:	f022 0210 	bic.w	r2, r2, #16
 8002c4a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002c4c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002c4e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c50:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c54:	680d      	ldr	r5, [r1, #0]
 8002c56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002c5a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c5e:	688d      	ldr	r5, [r1, #8]
 8002c60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c64:	4d0c      	ldr	r5, [pc, #48]	@ (8002c98 <TIM_OC2_SetConfig+0x58>)
 8002c66:	42a8      	cmp	r0, r5
 8002c68:	d006      	beq.n	8002c78 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8002c6a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002c6c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002c6e:	684a      	ldr	r2, [r1, #4]
 8002c70:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002c72:	6203      	str	r3, [r0, #32]
}
 8002c74:	bc30      	pop	{r4, r5}
 8002c76:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c7c:	68cd      	ldr	r5, [r1, #12]
 8002c7e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c86:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c8a:	694d      	ldr	r5, [r1, #20]
 8002c8c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c90:	698d      	ldr	r5, [r1, #24]
 8002c92:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002c96:	e7e8      	b.n	8002c6a <TIM_OC2_SetConfig+0x2a>
 8002c98:	40012c00 	.word	0x40012c00

08002c9c <HAL_TIM_PWM_ConfigChannel>:
{
 8002c9c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002c9e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d066      	beq.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	460d      	mov	r5, r1
 8002caa:	2301      	movs	r3, #1
 8002cac:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002cb0:	2a0c      	cmp	r2, #12
 8002cb2:	d85a      	bhi.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0xce>
 8002cb4:	e8df f002 	tbb	[pc, r2]
 8002cb8:	59595907 	.word	0x59595907
 8002cbc:	5959591b 	.word	0x5959591b
 8002cc0:	59595930 	.word	0x59595930
 8002cc4:	44          	.byte	0x44
 8002cc5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cc6:	6800      	ldr	r0, [r0, #0]
 8002cc8:	f7ff fd90 	bl	80027ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	6993      	ldr	r3, [r2, #24]
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	6993      	ldr	r3, [r2, #24]
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce0:	6822      	ldr	r2, [r4, #0]
 8002ce2:	6993      	ldr	r3, [r2, #24]
 8002ce4:	6929      	ldr	r1, [r5, #16]
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002cea:	2000      	movs	r0, #0
      break;
 8002cec:	e03e      	b.n	8002d6c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cee:	6800      	ldr	r0, [r0, #0]
 8002cf0:	f7ff ffa6 	bl	8002c40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	6993      	ldr	r3, [r2, #24]
 8002cf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cfc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	6993      	ldr	r3, [r2, #24]
 8002d02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d06:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d08:	6822      	ldr	r2, [r4, #0]
 8002d0a:	6993      	ldr	r3, [r2, #24]
 8002d0c:	6929      	ldr	r1, [r5, #16]
 8002d0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d12:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002d14:	2000      	movs	r0, #0
      break;
 8002d16:	e029      	b.n	8002d6c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d18:	6800      	ldr	r0, [r0, #0]
 8002d1a:	f7ff fd91 	bl	8002840 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	69d3      	ldr	r3, [r2, #28]
 8002d22:	f043 0308 	orr.w	r3, r3, #8
 8002d26:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d28:	6822      	ldr	r2, [r4, #0]
 8002d2a:	69d3      	ldr	r3, [r2, #28]
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	69d3      	ldr	r3, [r2, #28]
 8002d36:	6929      	ldr	r1, [r5, #16]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3c:	2000      	movs	r0, #0
      break;
 8002d3e:	e015      	b.n	8002d6c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d40:	6800      	ldr	r0, [r0, #0]
 8002d42:	f7ff fdab 	bl	800289c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	69d3      	ldr	r3, [r2, #28]
 8002d4a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d4e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d50:	6822      	ldr	r2, [r4, #0]
 8002d52:	69d3      	ldr	r3, [r2, #28]
 8002d54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d58:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d5a:	6822      	ldr	r2, [r4, #0]
 8002d5c:	69d3      	ldr	r3, [r2, #28]
 8002d5e:	6929      	ldr	r1, [r5, #16]
 8002d60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d64:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002d66:	2000      	movs	r0, #0
      break;
 8002d68:	e000      	b.n	8002d6c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002d6a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002d72:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002d74:	2002      	movs	r0, #2
 8002d76:	e7fc      	b.n	8002d72 <HAL_TIM_PWM_ConfigChannel+0xd6>

08002d78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d78:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d7a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d80:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002d84:	430a      	orrs	r2, r1
 8002d86:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8a:	6082      	str	r2, [r0, #8]
}
 8002d8c:	bc10      	pop	{r4}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002d90:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d078      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xfa>
{
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002da8:	6802      	ldr	r2, [r0, #0]
 8002daa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002db0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002db4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002db6:	680b      	ldr	r3, [r1, #0]
 8002db8:	2b60      	cmp	r3, #96	@ 0x60
 8002dba:	d04c      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0xc6>
 8002dbc:	d823      	bhi.n	8002e06 <HAL_TIM_ConfigClockSource+0x76>
 8002dbe:	2b40      	cmp	r3, #64	@ 0x40
 8002dc0:	d054      	beq.n	8002e6c <HAL_TIM_ConfigClockSource+0xdc>
 8002dc2:	d811      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x58>
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d003      	beq.n	8002dd0 <HAL_TIM_ConfigClockSource+0x40>
 8002dc8:	d80a      	bhi.n	8002de0 <HAL_TIM_ConfigClockSource+0x50>
 8002dca:	b10b      	cbz	r3, 8002dd0 <HAL_TIM_ConfigClockSource+0x40>
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d105      	bne.n	8002ddc <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6820      	ldr	r0, [r4, #0]
 8002dd4:	f7ff fdab 	bl	800292e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2000      	movs	r0, #0
      break;
 8002dda:	e028      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002ddc:	2001      	movs	r0, #1
 8002dde:	e026      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002de0:	2b30      	cmp	r3, #48	@ 0x30
 8002de2:	d0f5      	beq.n	8002dd0 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
 8002de6:	e022      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002de8:	2b50      	cmp	r3, #80	@ 0x50
 8002dea:	d10a      	bne.n	8002e02 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dec:	68ca      	ldr	r2, [r1, #12]
 8002dee:	6849      	ldr	r1, [r1, #4]
 8002df0:	6800      	ldr	r0, [r0, #0]
 8002df2:	f7ff fd77 	bl	80028e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df6:	2150      	movs	r1, #80	@ 0x50
 8002df8:	6820      	ldr	r0, [r4, #0]
 8002dfa:	f7ff fd98 	bl	800292e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2000      	movs	r0, #0
      break;
 8002e00:	e015      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002e02:	2001      	movs	r0, #1
 8002e04:	e013      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e0a:	d03a      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0xf2>
 8002e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e10:	d014      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0xac>
 8002e12:	2b70      	cmp	r3, #112	@ 0x70
 8002e14:	d137      	bne.n	8002e86 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	68cb      	ldr	r3, [r1, #12]
 8002e18:	684a      	ldr	r2, [r1, #4]
 8002e1a:	6889      	ldr	r1, [r1, #8]
 8002e1c:	6800      	ldr	r0, [r0, #0]
 8002e1e:	f7ff ffab 	bl	8002d78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e26:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002e2a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002e34:	2300      	movs	r3, #0
 8002e36:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002e3a:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002e3c:	68cb      	ldr	r3, [r1, #12]
 8002e3e:	684a      	ldr	r2, [r1, #4]
 8002e40:	6889      	ldr	r1, [r1, #8]
 8002e42:	6800      	ldr	r0, [r0, #0]
 8002e44:	f7ff ff98 	bl	8002d78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e48:	6822      	ldr	r2, [r4, #0]
 8002e4a:	6893      	ldr	r3, [r2, #8]
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e50:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2000      	movs	r0, #0
      break;
 8002e54:	e7eb      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e56:	68ca      	ldr	r2, [r1, #12]
 8002e58:	6849      	ldr	r1, [r1, #4]
 8002e5a:	6800      	ldr	r0, [r0, #0]
 8002e5c:	f7ff fd54 	bl	8002908 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e60:	2160      	movs	r1, #96	@ 0x60
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	f7ff fd63 	bl	800292e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2000      	movs	r0, #0
      break;
 8002e6a:	e7e0      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6c:	68ca      	ldr	r2, [r1, #12]
 8002e6e:	6849      	ldr	r1, [r1, #4]
 8002e70:	6800      	ldr	r0, [r0, #0]
 8002e72:	f7ff fd37 	bl	80028e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e76:	2140      	movs	r1, #64	@ 0x40
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	f7ff fd58 	bl	800292e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2000      	movs	r0, #0
      break;
 8002e80:	e7d5      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002e82:	2000      	movs	r0, #0
 8002e84:	e7d3      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002e86:	2001      	movs	r0, #1
 8002e88:	e7d1      	b.n	8002e2e <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8002e8a:	2002      	movs	r0, #2
}
 8002e8c:	4770      	bx	lr

08002e8e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e8e:	f001 011f 	and.w	r1, r1, #31
 8002e92:	f04f 0c01 	mov.w	ip, #1
 8002e96:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e9a:	6a03      	ldr	r3, [r0, #32]
 8002e9c:	ea23 030c 	bic.w	r3, r3, ip
 8002ea0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ea2:	6a03      	ldr	r3, [r0, #32]
 8002ea4:	408a      	lsls	r2, r1
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	6203      	str	r3, [r0, #32]
}
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIM_PWM_Start>:
{
 8002eac:	b510      	push	{r4, lr}
 8002eae:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	bb49      	cbnz	r1, 8002f08 <HAL_TIM_PWM_Start+0x5c>
 8002eb4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	bf18      	it	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d158      	bne.n	8002f74 <HAL_TIM_PWM_Start+0xc8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d136      	bne.n	8002f34 <HAL_TIM_PWM_Start+0x88>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4601      	mov	r1, r0
 8002ed0:	6820      	ldr	r0, [r4, #0]
 8002ed2:	f7ff ffdc 	bl	8002e8e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	4a28      	ldr	r2, [pc, #160]	@ (8002f7c <HAL_TIM_PWM_Start+0xd0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03a      	beq.n	8002f54 <HAL_TIM_PWM_Start+0xa8>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	4a26      	ldr	r2, [pc, #152]	@ (8002f7c <HAL_TIM_PWM_Start+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d03b      	beq.n	8002f5e <HAL_TIM_PWM_Start+0xb2>
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eea:	d038      	beq.n	8002f5e <HAL_TIM_PWM_Start+0xb2>
 8002eec:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d034      	beq.n	8002f5e <HAL_TIM_PWM_Start+0xb2>
 8002ef4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d030      	beq.n	8002f5e <HAL_TIM_PWM_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
 8002f06:	e036      	b.n	8002f76 <HAL_TIM_PWM_Start+0xca>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f08:	2904      	cmp	r1, #4
 8002f0a:	d007      	beq.n	8002f1c <HAL_TIM_PWM_Start+0x70>
 8002f0c:	2908      	cmp	r1, #8
 8002f0e:	d00b      	beq.n	8002f28 <HAL_TIM_PWM_Start+0x7c>
 8002f10:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002f14:	3b01      	subs	r3, #1
 8002f16:	bf18      	it	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	e7d0      	b.n	8002ebe <HAL_TIM_PWM_Start+0x12>
 8002f1c:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002f20:	3b01      	subs	r3, #1
 8002f22:	bf18      	it	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	e7ca      	b.n	8002ebe <HAL_TIM_PWM_Start+0x12>
 8002f28:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	bf18      	it	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	e7c4      	b.n	8002ebe <HAL_TIM_PWM_Start+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f34:	2804      	cmp	r0, #4
 8002f36:	d005      	beq.n	8002f44 <HAL_TIM_PWM_Start+0x98>
 8002f38:	2808      	cmp	r0, #8
 8002f3a:	d007      	beq.n	8002f4c <HAL_TIM_PWM_Start+0xa0>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002f42:	e7c3      	b.n	8002ecc <HAL_TIM_PWM_Start+0x20>
 8002f44:	2302      	movs	r3, #2
 8002f46:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002f4a:	e7bf      	b.n	8002ecc <HAL_TIM_PWM_Start+0x20>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002f52:	e7bb      	b.n	8002ecc <HAL_TIM_PWM_Start+0x20>
    __HAL_TIM_MOE_ENABLE(htim);
 8002f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f5a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f5c:	e7bf      	b.n	8002ede <HAL_TIM_PWM_Start+0x32>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f64:	2a06      	cmp	r2, #6
 8002f66:	d007      	beq.n	8002f78 <HAL_TIM_PWM_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002f70:	2000      	movs	r0, #0
 8002f72:	e000      	b.n	8002f76 <HAL_TIM_PWM_Start+0xca>
    return HAL_ERROR;
 8002f74:	2001      	movs	r0, #1
}
 8002f76:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002f78:	2000      	movs	r0, #0
 8002f7a:	e7fc      	b.n	8002f76 <HAL_TIM_PWM_Start+0xca>
 8002f7c:	40012c00 	.word	0x40012c00

08002f80 <HAL_TIM_PWM_Stop>:
{
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4604      	mov	r4, r0
 8002f84:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f86:	2200      	movs	r2, #0
 8002f88:	6800      	ldr	r0, [r0, #0]
 8002f8a:	f7ff ff80 	bl	8002e8e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	4a1b      	ldr	r2, [pc, #108]	@ (8003000 <HAL_TIM_PWM_Stop+0x80>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d014      	beq.n	8002fc0 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	6a19      	ldr	r1, [r3, #32]
 8002f9a:	f241 1211 	movw	r2, #4369	@ 0x1111
 8002f9e:	4211      	tst	r1, r2
 8002fa0:	d108      	bne.n	8002fb4 <HAL_TIM_PWM_Stop+0x34>
 8002fa2:	6a19      	ldr	r1, [r3, #32]
 8002fa4:	f240 4244 	movw	r2, #1092	@ 0x444
 8002fa8:	4211      	tst	r1, r2
 8002faa:	d103      	bne.n	8002fb4 <HAL_TIM_PWM_Stop+0x34>
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	b99d      	cbnz	r5, 8002fde <HAL_TIM_PWM_Stop+0x5e>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8002fc0:	6a19      	ldr	r1, [r3, #32]
 8002fc2:	f241 1211 	movw	r2, #4369	@ 0x1111
 8002fc6:	4211      	tst	r1, r2
 8002fc8:	d1e5      	bne.n	8002f96 <HAL_TIM_PWM_Stop+0x16>
 8002fca:	6a19      	ldr	r1, [r3, #32]
 8002fcc:	f240 4244 	movw	r2, #1092	@ 0x444
 8002fd0:	4211      	tst	r1, r2
 8002fd2:	d1e0      	bne.n	8002f96 <HAL_TIM_PWM_Stop+0x16>
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fda:	645a      	str	r2, [r3, #68]	@ 0x44
 8002fdc:	e7db      	b.n	8002f96 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002fde:	2d04      	cmp	r5, #4
 8002fe0:	d005      	beq.n	8002fee <HAL_TIM_PWM_Stop+0x6e>
 8002fe2:	2d08      	cmp	r5, #8
 8002fe4:	d007      	beq.n	8002ff6 <HAL_TIM_PWM_Stop+0x76>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002fec:	e7e6      	b.n	8002fbc <HAL_TIM_PWM_Stop+0x3c>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002ff4:	e7e2      	b.n	8002fbc <HAL_TIM_PWM_Stop+0x3c>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002ffc:	e7de      	b.n	8002fbc <HAL_TIM_PWM_Stop+0x3c>
 8002ffe:	bf00      	nop
 8003000:	40012c00 	.word	0x40012c00

08003004 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003004:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003008:	2a01      	cmp	r2, #1
 800300a:	d02c      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 800300c:	b410      	push	{r4}
 800300e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003010:	2201      	movs	r2, #1
 8003012:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003016:	2202      	movs	r2, #2
 8003018:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800301c:	6802      	ldr	r2, [r0, #0]
 800301e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003022:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003026:	6808      	ldr	r0, [r1, #0]
 8003028:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800302c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	480e      	ldr	r0, [pc, #56]	@ (800306c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003032:	4282      	cmp	r2, r0
 8003034:	d00a      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003036:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800303a:	d007      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800303c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003040:	4282      	cmp	r2, r0
 8003042:	d003      	beq.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8003044:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003048:	4282      	cmp	r2, r0
 800304a:	d104      	bne.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800304c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003050:	6849      	ldr	r1, [r1, #4]
 8003052:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003054:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800305c:	2000      	movs	r0, #0
 800305e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003062:	bc10      	pop	{r4}
 8003064:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003066:	2002      	movs	r0, #2
}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40012c00 	.word	0x40012c00

08003070 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003070:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003072:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d021      	beq.n	80030be <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800307a:	2301      	movs	r3, #1
 800307c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003080:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003086:	6888      	ldr	r0, [r1, #8]
 8003088:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800308a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800308e:	6848      	ldr	r0, [r1, #4]
 8003090:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003092:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003096:	6808      	ldr	r0, [r1, #0]
 8003098:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800309a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800309e:	6908      	ldr	r0, [r1, #16]
 80030a0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030a6:	6948      	ldr	r0, [r1, #20]
 80030a8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030ae:	69c9      	ldr	r1, [r1, #28]
 80030b0:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030b2:	6811      	ldr	r1, [r2, #0]
 80030b4:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 80030bc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80030be:	2002      	movs	r0, #2
}
 80030c0:	4770      	bx	lr

080030c2 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c4:	4770      	bx	lr

080030c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80030c8:	f7ff f9d2 	bl	8002470 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030cc:	e7fe      	b.n	80030cc <NMI_Handler+0x6>

080030ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <HardFault_Handler>

080030d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <MemManage_Handler>

080030d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d2:	e7fe      	b.n	80030d2 <BusFault_Handler>

080030d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <UsageFault_Handler>

080030d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030d6:	4770      	bx	lr

080030d8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d8:	4770      	bx	lr

080030da <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030da:	4770      	bx	lr

080030dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030de:	f7fd ff25 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030e2:	bd08      	pop	{r3, pc}

080030e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030e6:	4802      	ldr	r0, [pc, #8]	@ (80030f0 <DMA1_Channel1_IRQHandler+0xc>)
 80030e8:	f7fe fbb6 	bl	8001858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030ec:	bd08      	pop	{r3, pc}
 80030ee:	bf00      	nop
 80030f0:	200000b8 	.word	0x200000b8

080030f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80030f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030f6:	4802      	ldr	r0, [pc, #8]	@ (8003100 <ADC1_2_IRQHandler+0xc>)
 80030f8:	f7fd ff5b 	bl	8000fb2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80030fc:	bd08      	pop	{r3, pc}
 80030fe:	bf00      	nop
 8003100:	200000fc 	.word	0x200000fc

08003104 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003104:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003106:	4802      	ldr	r0, [pc, #8]	@ (8003110 <TIM1_BRK_IRQHandler+0xc>)
 8003108:	f7ff fc51 	bl	80029ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800310c:	bd08      	pop	{r3, pc}
 800310e:	bf00      	nop
 8003110:	20000050 	.word	0x20000050

08003114 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003114:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003116:	4802      	ldr	r0, [pc, #8]	@ (8003120 <TIM1_UP_IRQHandler+0xc>)
 8003118:	f7ff fc49 	bl	80029ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800311c:	bd08      	pop	{r3, pc}
 800311e:	bf00      	nop
 8003120:	20000050 	.word	0x20000050

08003124 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003124:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003126:	4802      	ldr	r0, [pc, #8]	@ (8003130 <TIM1_TRG_COM_IRQHandler+0xc>)
 8003128:	f7ff fc41 	bl	80029ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800312c:	bd08      	pop	{r3, pc}
 800312e:	bf00      	nop
 8003130:	20000050 	.word	0x20000050

08003134 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003134:	4770      	bx	lr
	...

08003138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003138:	f7ff fffc 	bl	8003134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800313c:	480b      	ldr	r0, [pc, #44]	@ (800316c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800313e:	490c      	ldr	r1, [pc, #48]	@ (8003170 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003140:	4a0c      	ldr	r2, [pc, #48]	@ (8003174 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003144:	e002      	b.n	800314c <LoopCopyDataInit>

08003146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314a:	3304      	adds	r3, #4

0800314c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800314c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800314e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003150:	d3f9      	bcc.n	8003146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003152:	4a09      	ldr	r2, [pc, #36]	@ (8003178 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003154:	4c09      	ldr	r4, [pc, #36]	@ (800317c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003158:	e001      	b.n	800315e <LoopFillZerobss>

0800315a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800315c:	3204      	adds	r2, #4

0800315e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800315e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003160:	d3fb      	bcc.n	800315a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003162:	f000 f817 	bl	8003194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003166:	f7fd fd0d 	bl	8000b84 <main>
  bx lr
 800316a:	4770      	bx	lr
  ldr r0, =_sdata
 800316c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003170:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8003174:	0800323c 	.word	0x0800323c
  ldr r2, =_sbss
 8003178:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800317c:	20000130 	.word	0x20000130

08003180 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <CAN1_RX1_IRQHandler>

08003182 <memset>:
 8003182:	4603      	mov	r3, r0
 8003184:	4402      	add	r2, r0
 8003186:	4293      	cmp	r3, r2
 8003188:	d100      	bne.n	800318c <memset+0xa>
 800318a:	4770      	bx	lr
 800318c:	f803 1b01 	strb.w	r1, [r3], #1
 8003190:	e7f9      	b.n	8003186 <memset+0x4>
	...

08003194 <__libc_init_array>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	2600      	movs	r6, #0
 8003198:	4d0c      	ldr	r5, [pc, #48]	@ (80031cc <__libc_init_array+0x38>)
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <__libc_init_array+0x3c>)
 800319c:	1b5b      	subs	r3, r3, r5
 800319e:	109c      	asrs	r4, r3, #2
 80031a0:	42a6      	cmp	r6, r4
 80031a2:	d109      	bne.n	80031b8 <__libc_init_array+0x24>
 80031a4:	2600      	movs	r6, #0
 80031a6:	f000 f819 	bl	80031dc <_init>
 80031aa:	4d0a      	ldr	r5, [pc, #40]	@ (80031d4 <__libc_init_array+0x40>)
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <__libc_init_array+0x44>)
 80031ae:	1b5b      	subs	r3, r3, r5
 80031b0:	109c      	asrs	r4, r3, #2
 80031b2:	42a6      	cmp	r6, r4
 80031b4:	d105      	bne.n	80031c2 <__libc_init_array+0x2e>
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031bc:	4798      	blx	r3
 80031be:	3601      	adds	r6, #1
 80031c0:	e7ee      	b.n	80031a0 <__libc_init_array+0xc>
 80031c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c6:	4798      	blx	r3
 80031c8:	3601      	adds	r6, #1
 80031ca:	e7f2      	b.n	80031b2 <__libc_init_array+0x1e>
 80031cc:	08003234 	.word	0x08003234
 80031d0:	08003234 	.word	0x08003234
 80031d4:	08003234 	.word	0x08003234
 80031d8:	08003238 	.word	0x08003238

080031dc <_init>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr

080031e8 <_fini>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr
